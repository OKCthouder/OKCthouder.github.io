<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ISLAND</title>
  <subtitle>一个人的孤岛。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://okcthouder.github.io/"/>
  <updated>2018-05-18T07:47:31.240Z</updated>
  <id>https://okcthouder.github.io/</id>
  
  <author>
    <name>Yujie Yang</name>
    <email>615851120@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二个任务</title>
    <link href="https://okcthouder.github.io/2018/05/04/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BB%BB%E5%8A%A1/"/>
    <id>https://okcthouder.github.io/2018/05/04/第二个任务/</id>
    <published>2018-05-04T10:01:08.000Z</published>
    <updated>2018-05-18T07:47:31.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二个任务"><a href="#第二个任务" class="headerlink" title="第二个任务"></a>第二个任务</h3><p>解决了第一个问题之后，很快也就迎来了新的任务。</p>
 <a id="more"></a>
<blockquote>
<p>熊奉标 17:03:34</p>
<p>内容：局内模板校验，判断设备的所属机房是否为空，如果不为空，取机房作为入参；如果机房为空，再判断是否OBD，非OBD取设备id入参，如果是OBD，取obd的所属上级设备id入参。</p>
<p>熊奉标 17:03:39</p>
<p>你再看看这个问题</p>
<p>熊奉标 17:06:24</p>
<p>问题是出在checkValidResource这个方法里面</p>
<p>熊奉标 17:07:04</p>
<p>就是校验导入的模板里面的数据，是不是有可用方案</p>
<p>熊奉标 17:07:34</p>
<p>checkValidResource这个方法的作用就是根据入参校验是否有可用方案</p>
<p>熊奉标 17:07:47</p>
<p>但是校验的时候存在一个问题</p>
<p>熊奉标 17:08:44</p>
<p>判断设备的所属机房是否为空，如果不为空，取机房作为入参；如果机房为空，再判断是否OBD，非OBD取设备id入参，如果是OBD，取obd的所属上级设备id入参。<br>上面需求定义的逻辑，代码少了：非OBD取设备id入参，这个逻辑</p>
</blockquote>
<p>看了一下问题，感觉应该问题不大，所以找到了对应的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkValidResource</span><span class="params">(Map&lt;String, String&gt; mapmo,String metaClassName,StringBuffer errorMsg)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="keyword">if</span>(!metaClassName.equals(<span class="string">"ACCESSNETFIBER(SZ)_INSTALL"</span>)</div><div class="line">		   &amp;&amp;!metaClassName.equals(<span class="string">"ACCESSNETFIBER(GZ)_INSTALL_PORTZI"</span>)</div><div class="line">		   &amp;&amp;!metaClassName.equals(<span class="string">"ACCESSNETFIBER(GZ)_INSTALL_ROOM"</span>)</div><div class="line">		   &amp;&amp;!metaClassName.equals(<span class="string">"TRANSMISSIONFIBER(SZ)_INSTALL"</span>)</div><div class="line">		   &amp;&amp;!metaClassName.equals(<span class="string">"TRANSMISSIONFIBER(GZ)_INSTALL"</span>))&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		String aId = mapmo.get(<span class="string">"AROOMID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"AROOMID"</span>);</div><div class="line">		String bId = mapmo.get(<span class="string">"BROOMID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"BROOMID"</span>);</div><div class="line">		String aDeviceId = mapmo.get(<span class="string">"ADEVICENAMEID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"ADEVICENAMEID"</span>);</div><div class="line">		String bDeviceId = mapmo.get(<span class="string">"BDEVICENAMEID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"BDEVICENAMEID"</span>);</div><div class="line">		String aDeviceSpecId = mapmo.get(<span class="string">"ADEVICENAMESPECID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"ADEVICENAMESPECID"</span>);</div><div class="line">		String bDeviceSpecId = mapmo.get(<span class="string">"BDEVICENAMESPECID"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:mapmo.get(<span class="string">"BDEVICENAMESPECID"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(aId.equals(<span class="string">""</span>)&amp;&amp;!aDeviceId.equals(<span class="string">""</span>)&amp;&amp;InventoryUtil.isSubClassOf(aDeviceSpecId, <span class="string">"OBD"</span>))&#123;</div><div class="line">			MetaObject obd = resourceConfigService.getBelongNEByOBD(aDeviceId, <span class="keyword">null</span>);</div><div class="line">			<span class="keyword">if</span>(obd!=<span class="keyword">null</span>)&#123;</div><div class="line">				aId = obd.getValue(<span class="string">"ID"</span>).toString();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(aId.equals(<span class="string">""</span>)&amp;&amp;!aDeviceId.equals(<span class="string">""</span>)&amp;&amp;!InventoryUtil.isSubClassOf(aDeviceSpecId, <span class="string">"OBD"</span>))&#123;			</div><div class="line">				aId = aDeviceId;			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(bId.equals(<span class="string">""</span>)&amp;&amp;!bDeviceId.equals(<span class="string">""</span>)&amp;&amp;InventoryUtil.isSubClassOf(bDeviceSpecId, <span class="string">"OBD"</span>))&#123;</div><div class="line">			MetaObject obd = resourceConfigService.getBelongNEByOBD(bDeviceId, <span class="keyword">null</span>);</div><div class="line">			<span class="keyword">if</span>(obd!=<span class="keyword">null</span>)&#123;</div><div class="line">				bId = obd.getValue(<span class="string">"ID"</span>).toString();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(bId.equals(<span class="string">""</span>)&amp;&amp;!bDeviceId.equals(<span class="string">""</span>)&amp;&amp;!InventoryUtil.isSubClassOf(bDeviceSpecId, <span class="string">"OBD"</span>))&#123;			</div><div class="line">			bId = bDeviceId;			</div><div class="line">	    &#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(aId.equals(<span class="string">""</span>)||bId.equals(<span class="string">""</span>))&#123;</div><div class="line">			errorMsg.append(<span class="string">"无可用方案！\r\n"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String shardingId = SecurityUtils.getCurrentShardingId();</div><div class="line">		<span class="comment">//单纤1,双纤2 </span></div><div class="line">		String fiberNum = InventoryUtil.isEmptyString(mapmo.get(<span class="string">"FIBERCOUNT"</span>))?<span class="string">""</span>:mapmo.get(<span class="string">"FIBERCOUNT"</span>);</div><div class="line">		<span class="keyword">int</span> fiberNum_int = fiberNum.equals(<span class="string">"双纤"</span>)?<span class="number">2</span>:<span class="number">1</span>;</div><div class="line">		<span class="comment">//双模1,单模3</span></div><div class="line">		String fiberType = InventoryUtil.isEmptyString(mapmo.get(<span class="string">"FIBERTYPE"</span>))?<span class="string">""</span>:mapmo.get(<span class="string">"FIBERTYPE"</span>);</div><div class="line">		<span class="keyword">int</span> fiberType_int = fiberType.equals(<span class="string">"双模"</span>)?<span class="number">1</span>:<span class="number">3</span>;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			Object[] results = metaService.executeSP(<span class="string">"PKG_OPTROAD_SEARCH.CHOOSE_SITEFIBER"</span>, </div><div class="line">								                    <span class="keyword">new</span> Object[]&#123;aId,bId,<span class="number">7</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,fiberNum_int,<span class="number">1</span>, fiberType_int&#125;, </div><div class="line">								                    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;OracleTypes.NUMBER,OracleTypes.VARCHAR&#125;,</div><div class="line">								                    InventoryUtil.getDbRouteContext(shardingId));</div><div class="line">			<span class="keyword">if</span>(results == <span class="keyword">null</span> || results.length&lt;<span class="number">2</span> || results[<span class="number">1</span>] == <span class="keyword">null</span> || results[<span class="number">1</span>].toString().length()==<span class="number">0</span>)&#123;</div><div class="line">				errorMsg.append(<span class="string">"无可用方案！\r\n"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			errorMsg.append(<span class="string">"无可用方案！\r\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>经过分析，发现下面代码是对  ==如果是OBD，取obd的所属上级设备id入参==  这个逻辑进行验证:</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\TIM图片20180503163658.png" alt="TIM图片20180503163658"></p>
<p>所以就在此逻辑的基础上再加上</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\TIM图片20180503163928.png" alt="TIM图片20180503163928"></p>
<p>对 ==非OBD取设备id入参==  这个逻辑进行判断。</p>
<p>然后今天标哥给了个测试文件，验证有没有走过这个逻辑判断。</p>
<p>经过debug，发现了一些问题：</p>
<p>在从数据库查询出moList这个列表时，发现moList里面全都为空，然后直接return，没有在mapmo对象中添加入aROOMID这个key值，导致aROOMID为空。</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503164226.png" alt="微信图片_20180503164226"></p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503164230.png" alt="微信图片_20180503164230"></p>
<p>查看了queryMetaObjectByColumn这个方法，也是发现resultList为空，此时怀疑会不会是数据库数据的问题，</p>
<p>然后捣鼓了一下oracle，发现连接不上，所以叫来了标哥。</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503164235.png" alt="微信图片_20180503164235"></p>
<p>看了一下系统，发现之前登录的是sa用户，是广州市的测试账户，然后测试文件是深圳的机房，在数据库中查询不到对应的机房，所以返回了null。</p>
<p>于是更换成testsz帐号，重启系统，debug一遍，代码完美走过我添加的那个逻辑，好的任务完成。</p>
<hr>
<p>接下来的任务就是把自己的代码提交到SVN代码库。</p>
<p>首先找到</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163733.png" alt="微信图片_20180502163733"></p>
<p>选中自己修改过的java文件，右键提交，并且添加上所解决问题的PMS作为备注。</p>
<p>提交成功后，就要给系统打补丁，打补丁之前就要先导出jar包，右键java文件-&gt;导出-&gt;jar文件</p>
<p>由于本次是两个PMS一起提交，所以需要把jar包合并：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504112433.png" alt="微信图片_20180504112433"></p>
<p>jar包命名规则如上：项目名-日期-姓名-pms</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504112436.png" alt="微信图片_20180504112436"></p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504112439.png" alt="微信图片_20180504112439"></p>
<p>jar包的内部结构必须要符合路径，具体路径如上，也可以在tomcat的配置路径那里找：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504112516.png" alt="微信图片_20180504112516"></p>
<p>打开以上目录，进入项目的地址：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504113217.png" alt="微信图片_20180504113217"></p>
<p>jar包的路径必须与以上的路径对应，这样打了补丁才会替换掉原来的文件。</p>
<p>然后就是登录自己的pms帐号，为pms打补丁：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504114543.png" alt="微信图片_20180504114543"></p>
<p>填写必要的信息，提交：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504114534.png" alt="微信图片_20180504114534"></p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504114537.png" alt="微信图片_20180504114537"></p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504114540.png" alt="微信图片_20180504114540"></p>
<p>还有一个加快系统运行的技巧：</p>
<p>就是每天第一次运行系统的时候用master运行，之后的每一次都可以用slave，速度会加快。</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180504112543.png" alt="微信图片_20180504112543"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二个任务&quot;&gt;&lt;a href=&quot;#第二个任务&quot; class=&quot;headerlink&quot; title=&quot;第二个任务&quot;&gt;&lt;/a&gt;第二个任务&lt;/h3&gt;&lt;p&gt;解决了第一个问题之后，很快也就迎来了新的任务。&lt;/p&gt;
    
    </summary>
    
      <category term="java, SNV, PMS" scheme="https://okcthouder.github.io/categories/java-SNV-PMS/"/>
    
    
      <category term="SVN" scheme="https://okcthouder.github.io/tags/SVN/"/>
    
      <category term="项目检出" scheme="https://okcthouder.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%A3%80%E5%87%BA/"/>
    
      <category term="java" scheme="https://okcthouder.github.io/tags/java/"/>
    
      <category term="逻辑校验" scheme="https://okcthouder.github.io/tags/%E9%80%BB%E8%BE%91%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="PMS" scheme="https://okcthouder.github.io/tags/PMS/"/>
    
  </entry>
  
  <entry>
    <title>第一个任务遇到的一些问题</title>
    <link href="https://okcthouder.github.io/2018/05/03/%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://okcthouder.github.io/2018/05/03/第一个任务遇到的一些问题/</id>
    <published>2018-05-03T10:01:08.000Z</published>
    <updated>2018-05-18T07:36:49.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一个任务遇到的一些问题"><a href="#第一个任务遇到的一些问题" class="headerlink" title="第一个任务遇到的一些问题"></a>第一个任务遇到的一些问题</h3><p>​    在捣鼓了几天的SVN检出项目之后，终于成功把代码从远程代码库下载下来并成功把系统运行起来了。但是由于系统过于庞大，跟了我几年的电脑开始有点不堪重负，CPU跟内存占用都达到了80%，风扇也转的很大声，赶紧叫来了标哥，在tomcat的配置文件那里加了一句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Xms2048m -Xmx2048m -XX:PermSize=512m -XX:MaxPermSize=512m</div></pre></td></tr></table></figure>
<p>​    问题终于迎刃而解。</p>
 <a id="more"></a>
<p>​    于是也就迎来了在公司的第一个任务：</p>
<blockquote>
<p>熊奉标 10:56:41<br>局内业务批量受理校验功能，如果导入的字段值有空格，则系统校验不通过，提示机房或者设施不存在。因此，要去系统优化功能，能自动去除字段值前后的空格后再进行校验。案例见附件</p>
</blockquote>
<p>​    这个任务的需求也就是在局内业务批量受理校验功能中，用户从系统导出excel模板，对着模板填充对应的信息。但是由于用户有时候会误操作，或者输入的时候会填充多一些空格在文字的前后，此时系统校验功能就会出错，自动读取空格为某一列，然后导致错位，提示机房或者设施不存在。所以需要在系统原有的基础上进行优化，能自动去除字段值前后的空格后再进行校验。</p>
<p>​    由于我的excel是2016版本，如果单元格没有设置为文本格式的话，是没有办法直接在文字前面或者后面直接添加空格，因为excel会自动去除空格，2010版本则没有这个问题。下面则列出我的部分测试数据(高亮部分为特殊测试数据，在数字的前后分别加入空格):</p>
<table>
<thead>
<tr>
<th>（必填）</th>
<th>无需填</th>
<th>无需填</th>
<th>无需填</th>
<th>（二选一必填）</th>
<th></th>
<th>无需填</th>
<th>无需填</th>
<th>（二选一必填）</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>接入网类型</td>
<td>光纤类型</td>
<td>纤芯数量</td>
<td>A端机房区域</td>
<td>A端机房</td>
<td>A端网元名称</td>
<td>A端端口位置</td>
<td>A端设备种类</td>
<td>B端机房区域</td>
<td>B端机房</td>
<td>B端网元名称</td>
<td>B端端口位置</td>
</tr>
<tr>
<td>FTTH，FTTO，FTTB+DSL，FTTB+LAN</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>OLT，1D-OBD，2D-OBD，ONU</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出字典值范围时提示提示“无此光路类型”</td>
<td>默认值：单模</td>
<td>默认值：单纤</td>
<td>由光交设施或机房生成</td>
<td>1、已填写但不存在，提示：A端机房名称不存在；    2、未填写：由A端网元名称生成</td>
<td>1、已填写但不存在，提示：A端网元名称不存在；</td>
<td>当不存在，提示：A端端子不存在；当无空闲，提示：A端端子非空闲。</td>
<td>当有填写时校验字典值范围。    当无填写时，由A端网元名称生成</td>
<td>由光交设施或机房生成</td>
<td>1、已填写但不存在，提示：B端机房名称不存在；    2、未填写：由B端网元名称生成</td>
<td>1、已填写但不存在，提示：B端网元名称不存在；</td>
<td>当不存在，提示：B端端子不存在；当无空闲，提示：B端端子非空闲。</td>
</tr>
<tr>
<td>FTTH</td>
<td></td>
<td></td>
<td></td>
<td>==<strong>11</strong>==</td>
<td><strong>==11==</strong></td>
<td>1</td>
<td></td>
<td></td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>​    在看了好久的源代码之后，终于开始着手写代码了。首先找到了<img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502153628.png" alt="微信图片_20180502153628"></p>
<p>在该源文件中添加了如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringWithoutSpace</span><span class="params">(String str)</span></span>&#123;</div><div class="line">  	String str1 = str.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</div><div class="line">  	<span class="keyword">return</span> str1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ctrl + S保存，再找到如下文件：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502154106.png" alt="微信图片_20180502154106"></p>
<p>在源代码中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//由于所有excel表格数据都是获取到mapmo对象中</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; loopCount; j++) &#123;</div><div class="line">			List&lt;Map&lt;String, String&gt;&gt; list = getDatasByPage(fileparse, j, <span class="number">0</span>);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; list.size(); k++) &#123;</div><div class="line">				Map&lt;String, String&gt; mapmo = list.get(k);</div><div class="line">              ｝</div><div class="line">                </div><div class="line"><span class="comment">//所以我就在想只要在每次mapmo对象获取key对应的value值时，对获得的String字符串进行去空格处理，如下所示：                </span></div><div class="line">String fiberMainState = mapmo.get(<span class="string">"CUS_NOTNULL_FIBERMAINSTATE"</span>);</div><div class="line">-&gt; </div><div class="line">String fiberMainState = InventoryUtil.getStringWithoutSpace(mapmo.get(<span class="string">"CUS_NOTNULL_FIBERMAINSTATE"</span>));</div><div class="line"></div><div class="line"><span class="comment">//对OrderVerifyImportProcessor.java文件中所有相应部位都加上InventoryUtil.getStringWithoutSpace(）处理。对读取的String进行去空格处理。</span></div></pre></td></tr></table></figure>
<p>Ctrl + S保存，右键tomcat-&gt;debug运行，导入测试文件进行测试，然后弹出如下空指针异常：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\TIM图片20180502155412.png" alt="TIM图片20180502155412"></p>
<p>这一下子就有点懵逼了，于是开始苦逼的debug断点调试，F5,F6旋转跳跃不停歇。</p>
<p>终于在一处地方看到了端倪：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String fiberMainState = InventoryUtil.getStringWithoutSpace(mapmo.get(<span class="string">"CUS_NOTNULL_FIBERMAINSTATE"</span>));</div><div class="line"><span class="comment">//当mapmo获取对应的value时，如果该value值本身为null，而上述的去空格代码没有进行判空处理，就会出现空指针异常。</span></div><div class="line"><span class="comment">//于是将代码改成如下：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringWithoutSpace</span><span class="params">(String str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(str != <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">    	String str1 = str.trim(); </div><div class="line">    	<span class="keyword">return</span> str1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时再次运行系统就没有再出现空指针异常。</p>
<p>然后成功导入用户的检验文件，输出校验结果文件：</p>
<table>
<thead>
<tr>
<th>校验成功码：</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>接入网光路(深圳)-订购</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>接入网类型</td>
<td>光纤类型</td>
<td>纤芯数量</td>
<td>A端机房区域</td>
<td>A端机房</td>
<td>A端网元名称</td>
<td>A端端口位置</td>
<td>A端设备种类</td>
<td>B端机房区域</td>
<td>B端机房</td>
</tr>
<tr>
<td>FTTH</td>
<td></td>
<td></td>
<td>海珠</td>
<td>==<strong>11</strong>==</td>
<td>==<strong>11</strong>==</td>
<td>1</td>
<td></td>
<td>黄埔</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>RESULT文件并没有将空格去除，但是在读取文件的时候空格明明已经去除了，我就在想可能是因为在读取excel文件时去除空格，只是存在于内存中，而在生成RESULT文件时没有将空格去除，所以还是有空格。</p>
<p>于是我又找到了生成RESULT文件的方法，对其进行修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createExcelFileManySheet</span><span class="params">(OutputStream out, String[] dataTitles,</span></span></div><div class="line">			List&lt;Map&lt;String, String&gt;&gt; dataList,HSSFRichTextString[] cellComment,String metaClassName,String verifyCode) &#123;</div><div class="line">		WritableWorkbook workbook;</div><div class="line">		WritableCellFeatures wcfeatures = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			workbook = Workbook.createWorkbook(out);</div><div class="line">			WritableSheet sheet = workbook.createSheet(<span class="string">"sheet1"</span>,<span class="number">0</span>);</div><div class="line">			NetworkTemplateUtil.initialSheetSetting(sheet);</div><div class="line">			verifyCode = <span class="string">"校验成功码："</span>+(verifyCode==<span class="keyword">null</span>?<span class="string">""</span>:verifyCode);</div><div class="line">			String productName = NetworkTemplateUtil.templateNameMaps.get(metaClassName);</div><div class="line">			sheet.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, verifyCode));</div><div class="line">			sheet.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">1</span>, productName));</div><div class="line">			Label label;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dataTitles.length; j++)&#123;</div><div class="line">				label = <span class="keyword">new</span> Label(j, <span class="number">2</span>, dataTitles[j]);</div><div class="line">				wcfeatures = <span class="keyword">new</span> WritableCellFeatures(); </div><div class="line">		        wcfeatures.setComment(cellComment[j].toString()); </div><div class="line">		        label.setCellFeatures(wcfeatures); </div><div class="line">				sheet.addCell(label);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;dataList.size(); row++) &#123;</div><div class="line">				Map&lt;String , String &gt; maps = dataList.get(row);</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; dataTitles.length ; n++) &#123;</div><div class="line">					Cell cells = sheet.getCell(n, <span class="number">2</span>);</div><div class="line">					String str = cells.getCellFeatures().getComment();</div><div class="line">					label = <span class="keyword">new</span> Label(n, row + <span class="number">3</span>, InventoryUtil.getStringWithoutSpace(maps.get(str));</div><div class="line">                                      <span class="comment">//在此处加入去空格处理，所以写入RESULT文件时就会没有空格</span></div><div class="line">					sheet.addCell(label);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			workbook.write();</div><div class="line">			workbook.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException s) &#123;</div><div class="line">			s.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (WriteException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			ex.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>事情到这个阶段就告一段落，成功运行系统，导出正确的RESULT文件，看到想要的结果，超级开心地叫来了标哥，在看了代码以后标哥给了个建议：</p>
<blockquote>
<p>这样改的话，可能需要改动的地方太多了，每一处有用到mapmo获取的地方都需要加入去空格处理，工程量太大，看看能不能在一开始获取excel表数据的源头那里就直接对数据进行处理，这样以后就不用每次都处理。</p>
</blockquote>
<p>然后我就找到了一开始读取excel表的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Map&lt;String, String&gt;&gt; parse(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> sheetIndex) &#123;</div><div class="line">	XSSFSheet sheet = sheets.get(sheetIndex);</div><div class="line">	<span class="keyword">if</span>(sheet == <span class="keyword">null</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	List&lt;String&gt; keyList = sheetsKeyList.get(sheetIndex);</div><div class="line">	List&lt;Map&lt;String, String&gt;&gt; excelList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, String&gt;&gt;();</div><div class="line">	<span class="keyword">int</span> startCol = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(commentRow==<span class="number">3</span>) startCol=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> row = begin; row &lt;= end; row++) &#123;</div><div class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">		<span class="keyword">if</span> (sheet.getRow(row) != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keyList.size(); i++) &#123;</div><div class="line">				String key = keyList.get(i);</div><div class="line">				String value = getCellValue(sheet, row, i+startCol);</div><div class="line">                 	  <span class="comment">//在这里加入去空格处理：</span></div><div class="line">                 	  String value = InventoryUtil.getStringWithoutSpace(getCellValue(sheet, row, i+startCol)）;</div><div class="line">				map.put(key, value);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">				excelList.add(map);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">			excelList.add(map);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> excelList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>去除其他地方的去空格处理，运行系统，得到了想要的效果。把标哥叫来了，标哥看了下这个parse方法，发现有两三处地方都调用了这个方法，改动了这个方法后这样子就有可能影响了其他地方的功能。所以再次给出了另外一个建议：</p>
<blockquote>
<p>既然所有的数据都是先获取到mapmo对象中，那可不可以考虑在获取mapmp后直接对其进行处理，然后再开始对它进行调用。</p>
<p>//由于所有excel表格数据都是获取到mapmo对象中<br>for (int j = 0; j &lt; loopCount; j++) {</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 		List&lt;Map&lt;String, String&gt;&gt; list = getDatasByPage(fileparse, j, <span class="number">0</span>);</div><div class="line">&gt; 		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; list.size(); k++) &#123;</div><div class="line">&gt; 			Map&lt;String, String&gt; mapmo = list.get(k);</div><div class="line">&gt;           ｝</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>​    考虑了一下以后，在OrderVerifyImportProcessor.java文件中编写一个新的方法，对mapmo对象进行去空格处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getMapmoWithoutSpace</span><span class="params">(Map&lt;String, String&gt; mapmo)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (mapmo == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">	Set&lt;String&gt; keys = mapmo.keySet();</div><div class="line">	<span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">			String value = mapmo.get(key);</div><div class="line">			value = InventoryUtil.getStringWithoutSpace(value);</div><div class="line">			mapmo.put(key, value);</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    运行系统，终于大功告成，第一个任务顺利完成，终于也能在公司提交自己写的代码了，也是很有成就感。</p>
<p>接下来就是将自己的代码同步到远程SVN仓库：</p>
<p>点击Team Synchronizing视图：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502162608.png" alt="微信图片_20180502162608"></p>
<p>点击Synchronize：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502162901.png" alt="微信图片_20180502162901"></p>
<p>选择SVN:</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163008.png" alt="微信图片_20180502163008"></p>
<p>可以直接选取工作空间，也可以选择工作集，然后可以创建自己的工作集，这样就不用每次都再全部同步:</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163114.png" alt="微信图片_20180502163114"></p>
<p>成功同步后，点击以下按钮：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163339.png" alt="微信图片_20180502163339"></p>
<p>查看svn代码库与本地代码库不同的文件，然后全选那些不同的文件，右键-&gt;更新，先对本地代码进行更新。</p>
<p>然后点击如下按钮：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163733.png" alt="微信图片_20180502163733"></p>
<p>经过与SVN代码库的代码对比，找出做出的修改，尽量做到只提交必要的修改：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163957.png" alt="微信图片_20180502163957"></p>
<p>然后右键对应的文件-&gt;提交：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502164225.jpg" alt="微信图片_20180502164225"></p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502164507.png" alt="微信图片_20180502164507"></p>
<p>此处需要用到PMS帐号，由于我还没有申请PMS帐号，所以就先写到这里。</p>
<hr>
<p>终于等到了PMS帐号，可以为公司提交代码啦，刚注册了PMS帐号，就发现自己头上有两个bug任务：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503162529.png" alt="微信图片_20180503162529"></p>
<p>接下来让我们来提交第一个bug的解决方案：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180502163733.png" alt="微信图片_20180502163733"></p>
<p>选择需要提交的代码，此处不能选择全部提交，只需要提交改动的java文件即可：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503162920.png" alt="微信图片_20180503162920"></p>
<p>添加上对应的PMS，点击OK即可。</p>
<p>接下来就是欣赏自己的成果了：</p>
<p><img src="C:\Users\Simple_Y\Pictures\总结\微信图片_20180503163022.png" alt="微信图片_20180503163022"></p>
<p>第一个任务到此就顺利完成啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一个任务遇到的一些问题&quot;&gt;&lt;a href=&quot;#第一个任务遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;第一个任务遇到的一些问题&quot;&gt;&lt;/a&gt;第一个任务遇到的一些问题&lt;/h3&gt;&lt;p&gt;​    在捣鼓了几天的SVN检出项目之后，终于成功把代码从远程代码库下载下来并成功把系统运行起来了。但是由于系统过于庞大，跟了我几年的电脑开始有点不堪重负，CPU跟内存占用都达到了80%，风扇也转的很大声，赶紧叫来了标哥，在tomcat的配置文件那里加了一句：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-Xms2048m -Xmx2048m -XX:PermSize=512m -XX:MaxPermSize=512m&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    问题终于迎刃而解。&lt;/p&gt;
    
    </summary>
    
      <category term="java, SNV, PMS" scheme="https://okcthouder.github.io/categories/java-SNV-PMS/"/>
    
    
      <category term="SVN" scheme="https://okcthouder.github.io/tags/SVN/"/>
    
      <category term="java， Tomcat" scheme="https://okcthouder.github.io/tags/java%EF%BC%8C-Tomcat/"/>
    
      <category term="空指针， PMS" scheme="https://okcthouder.github.io/tags/%E7%A9%BA%E6%8C%87%E9%92%88%EF%BC%8C-PMS/"/>
    
  </entry>
  
  <entry>
    <title>SVN检出项目遇到的坑</title>
    <link href="https://okcthouder.github.io/2018/04/14/SVN%E6%A3%80%E5%87%BA%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://okcthouder.github.io/2018/04/14/SVN检出项目遇到的坑/</id>
    <published>2018-04-14T10:01:08.000Z</published>
    <updated>2018-05-18T01:39:16.124Z</updated>
    
    <content type="html"><![CDATA[<p>用SVN检出maven项目遇到的坑：</p>
<h3 id="SVN检出项目："><a href="#SVN检出项目：" class="headerlink" title="SVN检出项目："></a>SVN检出项目：</h3><ol>
<li>一开始从svn检出的项目默认为java项目，需要将项目从工作空间移除后重新导入existing maven项目。</li>
<li>方法二则是右键项目Configure-&gt;Convert to Maven Projects,此时就可以看到项目左上角有一个m字maven项目标识。</li>
</ol>
 <a id="more"></a>
<h3 id="maven版本问题"><a href="#maven版本问题" class="headerlink" title="maven版本问题"></a>maven版本问题</h3><ol>
<li>一开始用的是maven3.5，项目导入之后全部都报错，丢包什么的。后来看到jdk1.6对应的maven版本为3.2，果断换成了3.2.5，迈出了成功的第一步。</li>
<li>一开始没有配置maven的setting.xml文件，没有引入公司内部资源库，导致一直找不到com.ccssoft…的jar包，后来把setting.xml换成标哥的文件，完美解决。</li>
<li>然后记得修改maven本地仓库，配置环境变量，在用户变量path和系统变量都要记得修改。</li>
<li>在eclipse中把外接maven地址更改，settings.xml文件位置也要更改。</li>
<li>记得把默认jdk版本换成1.6。</li>
<li>本来上周五按照标哥的方法把提示missing的jar删除后再重新maven-&gt;update Project更新一下，重新下载所需要的jar包，再加上把jdk和maven换成对应版本，所有项目已经没有报错了，但是过了一个周末，重启电脑以后又发现所有项目又重新报错（脸黑。。此处我怀疑是电脑太久没关机，没及时更新自己白高兴一场），于是又开始了新一轮的debug过程。。</li>
<li>在把百度几乎所有办法都试过了以后，还是不行，决定全部推倒重来，把项目全部都删除，在SVN重新下载项目，按照百度导入maven项目的方法，发现项目里面多了很多东西（这里还是很有成就感的！），然后把maven版本换成跟标哥一样，还是一堆错误，实在走投无路的时候发现为什么远程仓库一直连接不对，把jar包删除以后重新update也不会下载回来，于是跑到settings.xml文件把远程仓库那一段给注释掉。</li>
<li>重新打开eclipse，右键项目，maven-&gt;Update Project，开始下载文件！开心到飞起来啊那时候，一开始只试了一个项目，然后感觉把所有项目都勾选，update project，稍等一会儿~</li>
<li>吃个饭回来后发现有几个项目终于没有报错了，松了一口气~  然后就继续搞剩下的错误。</li>
<li>剩下的错误是有一些依赖文件好像在本项目没有，听了标哥的话把报错的段落全都注释掉，完美解决。</li>
<li>在导入项目的时候默认编码是gbk，可能会出现中文乱码的情况，右键项目property-&gt;编码改成utf-8，完美解决。</li>
<li>还有就是eclipse会有js自动校验，看到项目中一些jquery库文件报错，可以在window-&gt;preperence-&gt;javascript中关闭js校验。</li>
<li>还有就是这个项目要从tomcat debug模式运行，先配置好tomcat7.0环境，可是发现一直报错，把一些依赖文件删除之后就可以了，再一个是包重叠问题，可能pom.xml有多次引用。注释掉相应部分就可以了，或者找到重复包的位置，删除一个即可。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用SVN检出maven项目遇到的坑：&lt;/p&gt;
&lt;h3 id=&quot;SVN检出项目：&quot;&gt;&lt;a href=&quot;#SVN检出项目：&quot; class=&quot;headerlink&quot; title=&quot;SVN检出项目：&quot;&gt;&lt;/a&gt;SVN检出项目：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一开始从svn检出的项目默认为java项目，需要将项目从工作空间移除后重新导入existing maven项目。&lt;/li&gt;
&lt;li&gt;方法二则是右键项目Configure-&amp;gt;Convert to Maven Projects,此时就可以看到项目左上角有一个m字maven项目标识。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java, SNV" scheme="https://okcthouder.github.io/categories/java-SNV/"/>
    
    
      <category term="SVN" scheme="https://okcthouder.github.io/tags/SVN/"/>
    
      <category term="项目检出" scheme="https://okcthouder.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%A3%80%E5%87%BA/"/>
    
      <category term="java" scheme="https://okcthouder.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="https://okcthouder.github.io/2017/09/05/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>https://okcthouder.github.io/2017/09/05/MySQL基础/</id>
    <published>2017-09-05T07:16:03.000Z</published>
    <updated>2017-09-05T07:53:20.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文示例基于<a href="http://kmfree.me/files/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A.zip" target="_blank" rel="external">crashcourse</a>数据库，文中如有错误请谅解！<br>　　<a href="http://kmfree.me/image/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B.png" target="_blank" rel="external"><img src="http://kmfree.me/image/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B.png" alt="img"></a></p>
  <a id="more"></a>
<hr>
<h1 id="MySQL入门"><a href="#MySQL入门" class="headerlink" title="MySQL入门"></a>MySQL入门</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#查看数据库</div><div class="line">show databases; </div><div class="line">#选择一个数据库</div><div class="line">use 数据库名;</div><div class="line">#创建数据库</div><div class="line">create database 数据库名;</div><div class="line">#查看创建数据库的SQL语言</div><div class="line">show create database 数据库名;</div><div class="line">#查看表</div><div class="line">show tables;	</div><div class="line">#创建表</div><div class="line">create table student(id int(11) not null,name char(20));</div><div class="line">#查看表结构</div><div class="line">desc student;</div><div class="line">#查看创建表语句</div><div class="line">show create table student;</div><div class="line">#插入数据</div><div class="line">insert into student(id,name) values(1001,’zhangsan’);</div><div class="line">#查询数据</div><div class="line">select * from student; </div><div class="line">#删除数据</div><div class="line">delete from student where id=1001;	</div><div class="line">#删除表</div><div class="line">drop table student;</div><div class="line">#删除数据库</div><div class="line">drop database mydb;</div><div class="line">#查看mysql服务器状态信息</div><div class="line">show status;	</div><div class="line">#查看用户权限</div><div class="line">show grants;</div><div class="line">#查看服务器错误信息	</div><div class="line">show errors;	</div><div class="line">#查看服务器警告信息	</div><div class="line">show warnings;	</div><div class="line">#修改数据库保护模式	</div><div class="line">set SQL_SAFE_UPDATES =0;</div></pre></td></tr></table></figure>
<hr>
<h1 id="数据定义语句（DDL"><a href="#数据定义语句（DDL" class="headerlink" title="数据定义语句（DDL)"></a>数据定义语句（DDL)</h1><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Create table	customers</div><div class="line">（</div><div class="line">	cust_id	INT	 NOT NULL AUTO_INCREMENT,</div><div class="line">	cust_name	 char(50)	not null	default china,</div><div class="line">	cust_email	 char(50)	null,</div><div class="line">	primary key(cust_id)</div><div class="line">)engine = InnoDB;#引擎为InnoDB</div></pre></td></tr></table></figure>
<p>注：</p>
<ul>
<li><p>auto_incrment：自动增量，每个表只允许一个auto_increment，可通过select last_insert_id()获取该值。</p>
</li>
<li><p>指定默认值：default</p>
</li>
<li><p>更新表:alter table</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Alter table vendors ADD vend_phone char(20);</div><div class="line">Alter table vendors drop column vend_phone;</div><div class="line">Alter table 表名modify 列名 新类型 新参数；</div><div class="line">Alter table 表名 change 旧列名 新列名 新类型 新参数；</div><div class="line">Alter table 表名drop 列名；</div><div class="line">alter table products ADD CONSTRAINT fk_products_vendors</div><div class="line">	Foreign key (vend_id) references vendors(vend_id);#更新外键</div><div class="line">rename table 旧表名 to 新表名；#重命名</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Create</span> <span class="keyword">view</span> viewname <span class="keyword">AS</span> 查询语句；</div><div class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> viewname；#可以查看视图</div><div class="line"><span class="keyword">Show</span> <span class="keyword">create</span> <span class="keyword">view</span> viewname；#查询创建视图语句</div><div class="line"><span class="keyword">Drop</span> <span class="keyword">view</span> viewname；#删除视图</div><div class="line"><span class="keyword">Update</span> <span class="keyword">view</span> <span class="keyword">set</span> 列名=‘数据’ <span class="keyword">where</span>条件；</div></pre></td></tr></table></figure>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">use crashcourse;</div><div class="line">delimiter // #改变分隔符(除\之外都可以作为分隔符)</div><div class="line">create procedure p5(out n5 decimal(8,2),in in_t char(1))#创建存储过程#in传入out传出</div><div class="line">begin </div><div class="line">	if in_t = 'Y' then</div><div class="line">	select avg(prod_price)into n5 from products;</div><div class="line">	set @p=n5;				#设置变量p</div><div class="line">	else</div><div class="line">	set n5 = 100;</div><div class="line">	end if;</div><div class="line">end //</div><div class="line"></div><div class="line"></div><div class="line">delimiter ;</div><div class="line"></div><div class="line">call p5(@n5,'n');</div><div class="line">select @n5;</div><div class="line">select @p;</div><div class="line">drop procedure p5;</div><div class="line">show warnings;</div><div class="line">select * from products;</div><div class="line"></div><div class="line">delimiter //</div><div class="line"></div><div class="line">create procedure p3(in n int,in j char(1))</div><div class="line">begin</div><div class="line">	if j = 'h' then </div><div class="line">	select * from products where prod_price&lt;n;</div><div class="line">	else</div><div class="line">	select * from products where prod_price&gt;n;</div><div class="line">	end if;</div><div class="line">end//</div><div class="line">## drop procedure p3//</div><div class="line">delimiter ;</div><div class="line">call p3(5,'f');#查看存储过程结果</div><div class="line">drop procedure p3;</div><div class="line"></div><div class="line">delimiter //</div><div class="line">create procedure p4(in n int)</div><div class="line">begin</div><div class="line">	declare i int;</div><div class="line">	declare j int;</div><div class="line">	set i = 1;</div><div class="line">	set j = 0;</div><div class="line">	while i &lt;=n do</div><div class="line">		set i = j+i;</div><div class="line">		set i = i+1;</div><div class="line">	end while;</div><div class="line">select j;</div><div class="line">end//</div><div class="line">delimiter ;</div><div class="line">call p4(100);</div><div class="line">drop procedure p4;</div><div class="line">show  procedure status where db='crashcourse';#查看数据库的存储过程</div><div class="line">show errors;</div><div class="line">drop procedure p3;</div></pre></td></tr></table></figure>
<h2 id="游标-cursor-只能用于存储过程中，有开启就必须关闭"><a href="#游标-cursor-只能用于存储过程中，有开启就必须关闭" class="headerlink" title="游标(cursor,只能用于存储过程中，有开启就必须关闭)"></a>游标(cursor,只能用于存储过程中，有开启就必须关闭)</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Declare cursorname cursor for 查询语句；</div><div class="line">use crashcourse;</div><div class="line">create table p_test(sid varchar(20));</div><div class="line">deLIMITER //</div><div class="line">create procedure products()</div><div class="line">begin</div><div class="line">	declare a varchar(16);</div><div class="line">	declare done INt default false;#default 设置默认值</div><div class="line">	declare cur cursor for select prod_id from products;#定义游标cur，语句为cursor for 查询语句</div><div class="line">	declare continue handler for not found set done = true;</div><div class="line">	open cur;</div><div class="line">	read_loop:loop#定义循环</div><div class="line">		 fetch cur into a;#fetch 检索cur给变量a</div><div class="line">		if done then#判断语句</div><div class="line">		leave read_loop;#结束循环</div><div class="line">		end if;#结束判断语句</div><div class="line">insert into p_test(sid) values(a);#插入a变量值到p_test表</div><div class="line">end loop;</div><div class="line">close cur;</div><div class="line">end//</div><div class="line">delimiter ;</div><div class="line">call products();</div><div class="line">select * from p_test;</div><div class="line">drop procedure products;</div><div class="line">drop table p_test;</div><div class="line">show procedure status where db=’crashcources’;#查看存储过程</div><div class="line">delete from p_test;#清空表</div><div class="line">show warnings;</div></pre></td></tr></table></figure>
<h2 id="触发器（对表操作）"><a href="#触发器（对表操作）" class="headerlink" title="触发器（对表操作）"></a>触发器（对表操作）</h2><p>触发器响应的活动：insert、delete、update。before /after.每个表最多支持6个触发器。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Set @result = null;#定义变量，非触发器格式</div><div class="line">Create trigger tg after insert on products for each now selete ‘added’into @result;#红色部分为触发器，for each  row 每行</div><div class="line">Show  triggers;#查看触发器</div><div class="line">Drop trigger tg;#删除触发器</div></pre></td></tr></table></figure>
<p>Insert触发器：可引用new的虚拟表，访问被插入的行；<br>Before insert触发器中，new中的值可以被更新。<br><code>Create tigger neworder after insert on orders for each row select new.order_num into @result;</code><br>Delete触发器：可引用old表。</p>
<p>练习：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">use crashcourse;</div><div class="line">set @result=null;</div><div class="line">create trigger tg after insert on s5 for each row selete ‘added’ into @result;</div><div class="line">select * from s5;</div><div class="line">insert into s5 values(11);</div><div class="line">select @result;</div><div class="line">drop trigger tg;</div><div class="line">show triggers;</div><div class="line"></div><div class="line">use crashcourse;</div><div class="line">set @result=null;</div><div class="line">create trigger tg before insert on s5 for each row selete new.price into @result;#引用new表</div><div class="line">select * from s5;</div><div class="line">insert into s5 values(11);</div><div class="line">select @result;</div><div class="line">drop trigger tg;</div><div class="line">show triggers;</div><div class="line"></div><div class="line"></div><div class="line">use crashcourse;</div><div class="line">set @result=null;</div><div class="line">create trigger tg before delete on s5 for each row selete old.price into @result;#引用old表</div><div class="line">select * from s5;</div><div class="line">insert into s5 values(11);</div><div class="line">delete from s5 where price=6;#删除数据</div><div class="line">select @result;</div><div class="line">drop trigger tg;</div><div class="line">show triggers;</div></pre></td></tr></table></figure>
<hr>
<h1 id="数据检索语句-DQL"><a href="#数据检索语句-DQL" class="headerlink" title="数据检索语句(DQL)"></a>数据检索语句(DQL)</h1><h2 id="select检索数据"><a href="#select检索数据" class="headerlink" title="select检索数据"></a>select检索数据</h2><ul>
<li><p>distinct——去除重复行，显示不重复的行。<br><code>select distinct 列名 from 表名；</code></p>
</li>
<li><p>limit——显示制定行数。<br><code>select 列名 from limit n； #显示前n行</code><br><code>select 列名 from limit n,m; #从第n行开始的m行（从0开始的）</code></p>
</li>
<li><p>order by——结果排序。（ASCII码）<br><code>select 列名 from 表名 order by 列名；</code><br><code>select 列名 from 表名 order by 列名1，列名2；</code></p>
</li>
<li><p>ASC——升序，降序——DESC，关键字排序只用于其前面的列名排序。</p>
<p>注：limit用于order by之后。</p>
<h2 id="分组查询与子查询"><a href="#分组查询与子查询" class="headerlink" title="分组查询与子查询"></a>分组查询与子查询</h2></li>
<li><p>创建分组：<br><code>select vend_id,COUNT(*) AS　num_prods from products GROUP BY vend_id with rollup;</code><br>注：<br>后面加上with rollup,可以汇总分组数据；<br>group by 在where之后，order by 之前；</p>
</li>
<li><p>过滤分组：<br><code>select vend_id,count(*) as num_prods from products where prod_price&gt;=10 group by vend_id having count(*)&gt;=2;</code><br>注：having 针对分组结果，where针对列值。</p>
</li>
<li><p>子查询：in操作符,子查询常用于where子句的in操作符中，以及用来填充计算列。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_id <span class="keyword">from</span> orders <span class="keyword">where</span> order_num <span class="keyword">IN</span> (<span class="keyword">select</span> ordre_num <span class="keyword">from</span> orderitems <span class="keyword">where</span> prod_id =’TNT2’);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> cust_name,cust_state,(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> orders <span class="keyword">where</span> order.cust_id = customers.cust_id) <span class="keyword">AS</span> orders <span class="keyword">from</span> customers <span class="keyword">order</span> <span class="keyword">by</span> cust_name;</div></pre></td></tr></table></figure>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2></li>
<li><p>创建联结<br><code>Select vend_name,prod_name,prod_price from vendors,products where vendors.vend_id = products.vend_id order by vend_nam,prod_name;</code><br>笛卡尔积：去除联结条件，检索出的行数目为第一个表的行数乘以第二个表的行数。</p>
</li>
<li><p>内联结（等值联结）：INNER JOIN ON<br><code>SELECT vend_name,prod_name,prod_price from vendors INNOR JOIN products ON vendors.vend_id = products.vend_id;</code></p>
</li>
<li><p>多表联结(表关联的越多，性能下降越厉害)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> prod_name,vend_name,prod_price,quantity </div><div class="line"><span class="keyword">From</span> orderitems,products,vendors</div><div class="line"><span class="keyword">Where</span> products.vend_id = vendors.vend_id</div><div class="line"><span class="keyword">AND</span> orderitems.prod_id = products.prod_id</div><div class="line"><span class="keyword">AND</span> order_num = <span class="number">20005</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>表别名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Select</span> cust_name,cust_contact</div><div class="line"><span class="keyword">From</span> customers <span class="keyword">AS</span> c,orders <span class="keyword">AS</span> O,orderitems <span class="keyword">AS</span> oi</div><div class="line"><span class="keyword">Where</span> c.cust_id = o.cust_id</div><div class="line"><span class="keyword">AND</span> oou.order_num = o.order_num</div><div class="line"><span class="keyword">AND</span> prod_id = ‘TNT2’;</div></pre></td></tr></table></figure>
</li>
<li><p>自联结(自联结执行效率高于子查询)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SECECT prod_id,prod_name from products where vend_id = (<span class="keyword">select</span> vend_id <span class="keyword">from</span> products <span class="keyword">where</span> prod_id = ‘DTNTR’;</div><div class="line"><span class="keyword">Select</span> p1.prod_id,p1.prod_name <span class="keyword">from</span> products <span class="keyword">AS</span> p1,products <span class="keyword">AS</span> p2 <span class="keyword">where</span> p1.vend_ud = p2.vend_id <span class="keyword">AND</span> p2.prod_id = ‘DTNTR’;</div></pre></td></tr></table></figure>
</li>
<li><p>外联结（左联结、右联结）<br>左联结：<br><code>SELECT customers.cus_id,orders.order_num from customers LEFT OUTER JOIN orders ON customers.cust_id = orders.order.cust_id;</code><br>右联结：<br><code>SELECT * from student RIGHT JOIN course ON student_id = course.student_id;</code></p>
</li>
<li><p>联合查询：UNION /UNION ALL（显示重复）<br>注：查询条件列要一样，数据类型可以兼容，order by语句针对最终结果，不是对最后一个查询语句排序。</p>
</li>
</ul>
<hr>
<h1 id="数据操作语句-DML"><a href="#数据操作语句-DML" class="headerlink" title="数据操作语句(DML)"></a>数据操作语句(DML)</h1><h2 id="insert插入数据"><a href="#insert插入数据" class="headerlink" title="insert插入数据"></a>insert插入数据</h2><ul>
<li>插入完整行<br><code>insert into 表名（列名）values（各个列的值）；#不需要按列名顺序插入</code><br><code>insert into 表名 values（各个列的值）；#不给列名，按列名顺序插入</code></li>
<li>插入行的一部分</li>
<li>插入多行(逗号隔开)<br><code>insert into 表名 values(各个列的值)，（各个列的值）；</code></li>
<li>插入查询得到的数据(插入时，是按照列进行插入，不是按照列名插入)<br><code>insert into 表A（列1，列2） select 列1，列2 from表B；</code></li>
</ul>
<h2 id="update更新数据"><a href="#update更新数据" class="headerlink" title="update更新数据"></a>update更新数据</h2><p><code>update customers set cust_email = ‘elmer@fudd.com’ where cust_id = 1005;</code><br>注：更新多行数据用逗号‘，‘隔开</p>
<hr>
<h2 id="delete删除数据"><a href="#delete删除数据" class="headerlink" title="delete删除数据"></a>delete删除数据</h2><ul>
<li>delete<br><code>delete from customers where cust_id =10006;#删除表中的行</code><br><code>delete from customers;#清空表</code><br>注：如果需要快速清空表，则采用truncate 语句，该方法比delete删除快；<br><code>Truncate table 表名；</code></li>
</ul>
<hr>
<p>#条件查询和通配符 #<br><code>select 列名 from 表名 where 列满足的条件；</code><br>注：同时使用order by 和where 字句时，order by 应位于where 之后，否则报错</p>
<ul>
<li>操作符</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>between</td>
<td>介于</td>
</tr>
</tbody>
</table>
<ul>
<li>and操作符<br><code>select 列名 from 表名 where 条件1 and 条件2;</code></li>
<li>or操作符（或）<br><code>select 表名 from 表名 where 条件1 or 条件2；</code><br>注：and优先级高于or，圆括号优先级高于and，优先执行圆括号内的条件<br>同时出现and/or时，加括号语句更加严谨。</li>
<li>in操作符（指定条件范围）<br><code>select 列 from 表 where 列 in (value1,value2,…);</code></li>
<li>not操作符<br><code>select * from crashcourse.products where vend_id not in(1002,1003);</code><br>注：mysql中支持not对in、between、exists子句取反</li>
<li>like操作符<br>（<code>%</code>通配符——不能匹配null）<br><code>select 列 from 表 where prod_name LIKE ‘jet%’;</code><br><code>select 列 from 表 where prod_name LIKE ‘%anvil$’;</code><br>(<code>_</code>通配符——匹配单个字符)<br><code>select 列 from 表 where prod_name like ‘_ ton anvil’;</code></li>
<li>exists操作符<br><code>select * from tableA Where exists(Select * From tableB Where tableB.ID=tableA.ID)；</code><br>注：exists返回一个布尔值，为真则输出该语句结果，为假则不输出结果。<br>in操作符时候查询内小外大的表，exists操作符适合查询内大外小的表。In确定给定的值是否与子查询或列表中的值相匹配。exists Exists指定一个子查询，检测行的存在，因此一般用<code>*</code>代替所有列。</li>
</ul>
<h1 id="数据控制语言-DCL"><a href="#数据控制语言-DCL" class="headerlink" title="数据控制语言(DCL)"></a>数据控制语言(DCL)</h1><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>原子性、一致性、隔离性、持久性，只有InnoDB引擎支持事务操作。</p>
<ul>
<li><p>rollback(回退)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>；</div><div class="line"><span class="keyword">insert</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>语句；</div><div class="line"><span class="keyword">rollback</span>；</div></pre></td></tr></table></figure>
</li>
<li><p>commit(提交)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set autocommit = 0;#禁止自动提交</div><div class="line">set autocommit = 1;#启动自动提交</div></pre></td></tr></table></figure>
</li>
<li><p>savepoint（保留点）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">savepoint delete1；#使用保留点</div><div class="line">rollback delete1;#回退到保留点</div></pre></td></tr></table></figure>
</li>
</ul>
<p>练习：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">use crashcourse;</div><div class="line">select * from s5;</div><div class="line">start transaction;</div><div class="line">delete from s5;</div><div class="line">select * from s5;</div><div class="line">rollback;</div><div class="line">select * from s5;</div><div class="line">create table s6(sid varchar(10),sanme varchar(20));</div><div class="line">set autocommit =1;</div><div class="line">insert into s6 values(‘1001’,’zhangsan’);</div><div class="line">select * from s6;</div><div class="line">rollback;</div><div class="line"></div><div class="line">start transaction;</div><div class="line">insert into s6 values(‘1002’,’lisam’);</div><div class="line">savepoint  in1;</div><div class="line">insert into s6 values(‘1003’,’wangwu’);</div><div class="line">rollback to in1;</div><div class="line">commit;</div><div class="line">delete from s6;</div><div class="line">select @@autocommit;#查看autocommit值</div></pre></td></tr></table></figure>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li><p>管理用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Use mysql；</div><div class="line">Select user from user;</div><div class="line">Create user jack@localhost identified by ‘jack123’;</div><div class="line">Rename user jack@.localhost to peter@localhost;</div><div class="line">Update user set password = password(‘jacknewpassword’) where user = ‘jack’;#修改密码，password（‘jacknewpassword’）加密密码</div><div class="line">Set password for jack@localhost = Password(‘jacknewpassword’);#同上</div><div class="line">Drop user jack@localhost;</div><div class="line"></div><div class="line">Show grants for username;#查看权限</div><div class="line">Grant select on crashcourse.* to username；#授予crashcourse数据库select查询权限</div><div class="line">Revoke select，create  on crashcourse.* from username;#grant与revoke反义</div></pre></td></tr></table></figure>
</li>
<li><p>权限</p>
<ul>
<li>整个服务器：grant all 和revoke all;</li>
<li>整个数据库：使用on 数据库名.*；</li>
<li>特定的表，使用on 数据库名.表名；</li>
<li>特定的列:<br><code>grant select(cust_id) on *.* to jack@localhost;</code></li>
<li>特地的存储过程与函数:<br><code>grant execute on procedure/fuction mydb.student to jack@localhost;</code></li>
</ul>
</li>
</ul>
<p>练习：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">use musql;</div><div class="line">select user from user;</div><div class="line">create user jack@localhost identified by ‘123’;</div><div class="line">select user from user;</div><div class="line">select user,password from user;</div><div class="line">grant select on crashcourse.* to jack;</div><div class="line">select *from student;</div><div class="line">update student set sname = ‘limin’ where  sid = ‘3108001’;#error，无权限</div><div class="line">grant select(sname) on crashcourse.student to jack@localhost;</div><div class="line">select * from student;#error</div><div class="line">select sname from student;</div><div class="line">grant update(sanme) on crashcourse.student to jack@localhost;</div><div class="line">grant update on crashcourse.* to jack@localhost;</div><div class="line">update student set sname = ‘limin’ where  sid = ‘3108001’;#可以更新</div><div class="line">update student set sid= ‘3105486’ where sname = ‘limin’;#error,无权限</div></pre></td></tr></table></figure>
<hr>
<h1 id="MySQL正则表达式"><a href="#MySQL正则表达式" class="headerlink" title="MySQL正则表达式"></a>MySQL正则表达式</h1><ul>
<li>正则表达式简介<br>  正则表达式是用来匹配文本的特殊的字符集合，如果想从一个文本文件中提取电话号码，可以使用正则表达式来完成。</li>
<li>正则表达式作用<br>  正则表达式的作用是匹配文本，讲一个正则表达式与一个文本串进行比较Mysql用where子句对正则表达式提供支持，允许指定正则表达式过滤select 查找出的数据</li>
<li>正则表达式格式<br>  在where子句中使用REGEXP关键字，后面接正则表达式字符</li>
<li>正则表达式与like的区别<ul>
<li>在where中可以使用like（not like ）和REGEXP(NOT REGEXP)来匹配特定的内容</li>
</ul>
</li>
</ul>
<ol>
<li>like匹配整列数据</li>
<li>REGEXP可以匹配列中任意位置的文本<ul>
<li>REGEXP更加灵活强大</li>
<li>Mysql中正则表达式不区分大小写,如果需要区分大小写，可在regexp后加binary。如：where prod_name regexp binary “JetPack .000”.</li>
</ul>
</li>
</ol>
<ul>
<li><p>用法简介</p>
<ul>
<li>使用‘|’，来匹配2个字符串的一个where prod_name regexp ‘1001|1002’;</li>
</ul>
</li>
</ul>
<pre><code>- 使用[],匹配几个字符中的一个 where prod_name REGEXP ‘[123]’ ton’;


- 使用[^ ],不匹配几个字符中的任意一个
</code></pre><ul>
<li>匹配一个范围，[1-9]1-9数字/[a-z]a-z字符<ul>
<li>任意字符的匹配——‘\’如：. 表示.的转义字符</li>
</ul>
</li>
</ul>
<ul>
<li>正则表达式字符集<br><a href="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_1.jpg" target="_blank" rel="external"><img src="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_1.jpg" alt="img"></a><br><a href="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_2.jpg" target="_blank" rel="external"><img src="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_2.jpg" alt="img"></a><br><a href="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_3.jpg" target="_blank" rel="external"><img src="http://kmfree.me/image/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_3.jpg" alt="img"></a><br>实例：<br>Where prod_name regexp ‘[[:digit:]]{4};——连续四个数字</li>
</ul>
<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>concat（链接字段）<br><code>select concat（vend_name,’(‘,vend_country,’)’） from vendors ORDER BY vend_name;</code><br>trim——去掉字符串左右两边空格<br>ltrim——去掉左边空格<br>rtrim——去掉右边空格</li>
<li>列别名<br><code>select concat（vend_name,’(‘,vend_country,’)’）AS evend_title from vendors ORDER BY vend_name;</code></li>
<li>算数计算（+ - <em> /）`select prod_id,quantity,item_price,quantity</em>item_price AS expanded_price from orderitems where order_num =20005;`</li>
</ul>
<h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><p>Left(字符串，N) Right(字符串，N) ——返回串左（右）边的字符<br><code>Select left(cust_address,3) from customers;</code><br>Length（） ——返回串的长度<br><code>Select vend_name,length(vend_name) as vend_name_length from crashcrouse,vendors;</code><br>Locate（） ——找出串的一个子串<br><code>Select vend_city,locate(‘o’,vend_city) from vendors;</code><br>Trim() ltrim() rtrim() ——去掉空格<br><code>Select trim(cust_address) from customers；</code><br>Lower() upper() ——字符串大小写<br><code>Select vend_name,upper(vend_name) as vend_name_upcase from croushcourse.vendors;</code><br>Soundex（） ——返回串的soundex值<br><code>Select cust_name,cust_contact from customers where soudex(cust_contact) = soundex(‘Y lie);</code><br>Substring（） ——返回子串的字符</p>
<h2 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h2><p>Abs()——绝对值<br>Cos()——余弦<br>Exp（）——指数值<br>Mod（）——余数<br>Pi（）——圆周率<br>Rand（）——随机数<br>Sin（）——正弦<br>Sqrt（）——平方根<br>Tan（） ——正切<br>例如：不需要from表。<br><code>Select pi();</code><br><code>Select rand();</code></p>
<h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><p>Avg（）——平均值<br>Count()——行数<br>—count（*）表示对表的行数进行统计，count（列名）表示对该列中具体值进行统计。<br>例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> num_cust <span class="keyword">from</span> customers；	#返回<span class="number">5</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(ust_email)  <span class="keyword">as</span> num_cust <span class="keyword">from</span> customers；	#返回<span class="number">3</span></div></pre></td></tr></table></figure>
<p>注：null值被count（列名）忽略，而不被count（*）忽略。</p>
<p>Max（）——最大值<br>Min（）——最小值<br>Sum（）——列值求和<br>DISTINCT参数：剔除重复<br><code>Select avg(distinct prod_price) as avg_price from products where vend_id =1003;</code><br>注：distinct适用于以上5种函数，但是不适用于count（*），必须使用别名，不能用户计算或表达式。</p>
<hr>
<h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><ul>
<li>备份和恢复数据<br><code>mysqldump –u root –p crashcourse&gt;/tmp/back.sql #备份数据库</code><br><code>mysqldump –u root –p crashcourse Vendors&gt;table.sql#备份数据表</code><br><code>mysql-uroot –p crashcourse&lt;/tmp/backup.sql#备份数据导入数据库</code></li>
<li><code>analyze table orders；</code></li>
<li><code>optimize table orders;</code></li>
<li>配置文件：/etc/my.cnf</li>
<li>错误日志：/var/log/mysqld.log</li>
<li><code>flush tables;</code></li>
<li><code>flush logs;</code></li>
</ul>
<p>注:<br>Linux默认安装有mysql;<br><code>Service mysql status #linux下查看mysql服务器开启情况</code><br><code>Service mysql start #linux下启动mysql</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文示例基于&lt;a href=&quot;http://kmfree.me/files/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;crashcourse&lt;/a&gt;数据库，文中如有错误请谅解！&lt;br&gt;　　&lt;a href=&quot;http://kmfree.me/image/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://kmfree.me/image/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B.png&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://okcthouder.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://okcthouder.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://okcthouder.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Node.js读书笔记</title>
    <link href="https://okcthouder.github.io/2017/08/07/Node-js%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://okcthouder.github.io/2017/08/07/Node-js读书笔记/</id>
    <published>2017-08-07T10:43:44.000Z</published>
    <updated>2017-08-07T10:49:25.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些NPM常用命令"><a href="#一些NPM常用命令" class="headerlink" title="一些NPM常用命令"></a>一些NPM常用命令</h2><ul>
<li>NPM提供了很多命令，例如<code>install</code>和<code>publish</code>，使用<code>npm help</code>可查看所有命令。</li>
<li>使用<code>npm help &lt;command&gt;</code>可查看某条命令的详细帮助，例如<code>npm help install</code>。</li>
<li>在<code>package.json</code>所在目录下使用<code>npm install . -g</code>可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>
<li>使用<code>npm update &lt;package&gt;</code>可以把当前目录下<code>node_modules</code>子目录里边的对应模块更新至最新版本。</li>
<li>使用<code>npm update &lt;package&gt; -g</code>可以把全局安装的对应命令行程序更新至最新版。</li>
<li>使用<code>npm cache clear</code>可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</li>
<li><p>使用<code>npm unpublish &lt;package&gt;@&lt;version&gt;</code>可以撤销发布自己发布过的某个版本代码。</p>
<a id="more"></a>
</li>
</ul>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="小文件拷贝"><a href="#小文件拷贝" class="headerlink" title="小文件拷贝"></a>小文件拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dst</span>) </span>&#123;</div><div class="line">    fs.writeFileSync(dst, fs.readFileSync(src));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</div><div class="line">    copy(argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(process.argv.slice(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>豆知识：</strong> <code>process</code>是一个全局变量，可通过<code>process.argv</code>获得命令行参数。由于<code>argv[0]</code>固定等于NodeJS执行程序的绝对路径，<code>argv[1]</code>固定等于主模块的绝对路径，因此第一个命令行参数从<code>argv[2]</code>这个位置开始。</p>
</blockquote>
<hr>
<h3 id="大文件拷贝"><a href="#大文件拷贝" class="headerlink" title="大文件拷贝"></a>大文件拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dst</span>) </span>&#123;</div><div class="line">    fs.createReadStream(src).pipe(fs.createWriteStream(dst));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">argv</span>) </span>&#123;</div><div class="line">    copy(argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(process.argv.slice(<span class="number">2</span>));</div></pre></td></tr></table></figure>
<h3 id="防止数据流内部的缓存爆仓"><a href="#防止数据流内部的缓存爆仓" class="headerlink" title="防止数据流内部的缓存爆仓"></a>防止数据流内部的缓存爆仓</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(src);</div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(dst);</div><div class="line"></div><div class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ws.write(chunk) === <span class="literal">false</span>) &#123;</div><div class="line">        rs.pause();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    ws.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ws.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    rs.resume();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果写入速度跟不上读取速度的话，只写数据流内部的缓存会爆仓。我们可以根据<code>.write</code>方法的<strong>返回值</strong>来判断传入的数据是写入目标了，还是临时放在了缓存了，并根据<code>drain</code>事件来判断什么时候只写数据流已经将缓存中的数据写入目标，可以传入下一个待写数据了。</p>
</blockquote>
<h2 id="遍历文件目录"><a href="#遍历文件目录" class="headerlink" title="遍历文件目录"></a>遍历文件目录</h2><h3 id="同步遍历"><a href="#同步遍历" class="headerlink" title="同步遍历"></a>同步遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">efunction travel(dir, callback) &#123;</div><div class="line">    fs.readdirSync(dir).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> pathname = path.join(dir, file);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fs.statSync(pathname).isDirectory()) &#123;</div><div class="line">            travel(pathname, callback);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            callback(pathname);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步遍历"><a href="#异步遍历" class="headerlink" title="异步遍历"></a>异步遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">travel</span>(<span class="params">dir, callback, finish</span>) </span>&#123;</div><div class="line">    fs.readdir(dir, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</div><div class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (i &lt; files.length) &#123;</div><div class="line">                <span class="keyword">var</span> pathname = path.join(dir, files[i]);</div><div class="line"></div><div class="line">                fs.stat(pathname, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (stats.isDirectory()) &#123;</div><div class="line">                        travel(pathname, callback, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                            next(i + <span class="number">1</span>);</div><div class="line">                        &#125;);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        callback(pathname, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                            next(i + <span class="number">1</span>);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                finish &amp;&amp; finish();</div><div class="line">            &#125;</div><div class="line">        &#125;(<span class="number">0</span>));</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些NPM常用命令&quot;&gt;&lt;a href=&quot;#一些NPM常用命令&quot; class=&quot;headerlink&quot; title=&quot;一些NPM常用命令&quot;&gt;&lt;/a&gt;一些NPM常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NPM提供了很多命令，例如&lt;code&gt;install&lt;/code&gt;和&lt;code&gt;publish&lt;/code&gt;，使用&lt;code&gt;npm help&lt;/code&gt;可查看所有命令。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;npm help &amp;lt;command&amp;gt;&lt;/code&gt;可查看某条命令的详细帮助，例如&lt;code&gt;npm help install&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;package.json&lt;/code&gt;所在目录下使用&lt;code&gt;npm install . -g&lt;/code&gt;可先在本地安装当前命令行程序，可用于发布前的本地测试。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;npm update &amp;lt;package&amp;gt;&lt;/code&gt;可以把当前目录下&lt;code&gt;node_modules&lt;/code&gt;子目录里边的对应模块更新至最新版本。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;npm update &amp;lt;package&amp;gt; -g&lt;/code&gt;可以把全局安装的对应命令行程序更新至最新版。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;npm cache clear&lt;/code&gt;可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;npm unpublish &amp;lt;package&amp;gt;@&amp;lt;version&amp;gt;&lt;/code&gt;可以撤销发布自己发布过的某个版本代码。&lt;/p&gt;
    
    </summary>
    
      <category term="node.js" scheme="https://okcthouder.github.io/categories/node-js/"/>
    
    
      <category term="读书笔记" scheme="https://okcthouder.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node.js" scheme="https://okcthouder.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js 循环的陷阱</title>
    <link href="https://okcthouder.github.io/2017/08/03/%E5%BE%AA%E7%8E%AF%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>https://okcthouder.github.io/2017/08/03/循环的陷阱/</id>
    <published>2017-08-03T03:43:07.000Z</published>
    <updated>2017-08-03T03:47:30.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node.js  的异步机制由事件和回调函数实现，一开始接触可能会感觉违反常规，但习惯以后就会发现还是很简单的。然而这之中其实暗藏了不少陷阱，一个很容易遇到的问题就是循环中的回调函数，初学者经常容易陷入这个圈套。</p>
 <a id="more"></a>
<h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>让我们从一个例子开始说明这个问题。<br>//forloop.js </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </div><div class="line"></div><div class="line"><span class="keyword">var</span> files = [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>]; </div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123; </div><div class="line">  fs.readFile(files[i], <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(files[i] + <span class="string">': '</span> + contents); </div><div class="line">  &#125;); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这段代码的功能很直观，就是依次读取文件 a.txt、b.txt、c.txt，并输出文件名和内容。<br>假设这三个文件的内容分别是 AAA、BBB 和 CCC，那么我们期望的输出结果就是： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a.txt: AAA </div><div class="line"></div><div class="line">b.txt: BBB </div><div class="line"></div><div class="line">c.txt: CCC</div></pre></td></tr></table></figure>
<p>可是我们运行这段代码的结果是怎样的呢？竟然是这样的结果： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span>: AAA </div><div class="line"></div><div class="line"><span class="literal">undefined</span>: BBB </div><div class="line"></div><div class="line"><span class="literal">undefined</span>: CCC</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个结果说明文件内容正确输出了，而文件名却不对，也就意味着， contents  的结果是正确的，但  files[i]  的值是  undefined 。这怎么可能呢，文件名不正确却能读取文件内容？</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>既然难以直观地理解，我们就把  files[i]  分解并打印出来看看，在读取文件的回调函数中分别输出  files 、 i  和  files[i] 。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//forloopi.js </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </div><div class="line"><span class="keyword">var</span> files = [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123; </div><div class="line">  fs.readFile(files[i], <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(files); </div><div class="line">    <span class="built_in">console</span>.log(i); </div><div class="line">    <span class="built_in">console</span>.log(files[i]); </div><div class="line">  &#125;); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行修改后的代码，结果如下： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span> ] </div><div class="line"><span class="number">3</span> </div><div class="line"><span class="literal">undefined</span> </div><div class="line">[ <span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span> ] </div><div class="line"><span class="number">3</span> </div><div class="line"><span class="literal">undefined</span> </div><div class="line">[ <span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span> ] </div><div class="line"><span class="number">3</span> </div><div class="line"><span class="literal">undefined</span></div></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到这里是不是有点启发了呢？三次输出的  i  的值都是 3，超出了  files  数组的下标范围，因此  files[i]   的值就是  undefined  了。这种情况通常会在  for   循环结束时发生，例如  for (var i = 0;  i &lt; files.length; i++) ，退出循环时  i  的值就是 files.length  的值。既然  i  的值是 3，那么说明了事实上  fs.readFile  的回调函数中访问到的  i  值都是循环退出以后的，因此不能分辨。而  files[i]  作为  fs.readFile  的第一个参数在循环中就传递了，所以文件可以被定位到，而且可以显示出文件的内容。 现在问题就明朗了：原因是3次读取文件的回调函数事实上是同一个实例，其中引用到的  i   值是上面循环执行结束后的值，因此不能分辨。</p>
<h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><p>如何解决这个问题呢？我们可以利用 JavaScript 函数式编程的特性，手动建立一个闭包： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//forloopclosure.js </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </div><div class="line"><span class="keyword">var</span> files = [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123; </div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123; </div><div class="line">    fs.readFile(files[i], <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123; </div><div class="line">      <span class="built_in">console</span>.log(files[i] + <span class="string">': '</span> + contents); </div><div class="line">    &#125;); </div><div class="line">  &#125;)(i); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面代码在  for  循环体中建立了一个匿名函数，将循环迭代变量  i  作为函数的参数传递并调用。由于运行时闭包的存在，该匿名函数中定义的变量（包括参数表）在它内部的函数（  fs.readFile  的回调函数）执行完毕之前都不会释放，因此我们在其中访问到的  i  就分别是不同闭包实例，这个实例是在循环体执行的过程中创建的，保留了不同的值。 事实上以上这种写法并不常见，因为它降低了程序的可读性，故不推荐使用。</p>
<h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><p>大多数情况下我们可以用数组的  forEach  方法解决这个问题： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//callbackforeach.js </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </div><div class="line"><span class="keyword">var</span> files = [<span class="string">'a.txt'</span>, <span class="string">'b.txt'</span>, <span class="string">'c.txt'</span>]; </div><div class="line"> </div><div class="line">files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123; </div><div class="line">  fs.readFile(filename, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(filename + <span class="string">': '</span> + contents); </div><div class="line">  &#125;); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node.js  的异步机制由事件和回调函数实现，一开始接触可能会感觉违反常规，但习惯以后就会发现还是很简单的。然而这之中其实暗藏了不少陷阱，一个很容易遇到的问题就是循环中的回调函数，初学者经常容易陷入这个圈套。&lt;/p&gt;
    
    </summary>
    
      <category term="node.js" scheme="https://okcthouder.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://okcthouder.github.io/tags/node-js/"/>
    
      <category term="异步机制" scheme="https://okcthouder.github.io/tags/%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6/"/>
    
      <category term="循环" scheme="https://okcthouder.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何解决node.js中fs.rename文件跨域问题</title>
    <link href="https://okcthouder.github.io/2017/07/31/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3node-js%E4%B8%ADfs-rename%E6%96%87%E4%BB%B6%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://okcthouder.github.io/2017/07/31/如何解决node-js中fs-rename文件跨域问题/</id>
    <published>2017-07-31T10:01:08.000Z</published>
    <updated>2017-07-31T10:22:27.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在学习node.js，今天在写一个文件上传的功能，调用fs.rename上传文件时程序报了错。 </p>
 <a id="more"></a>
<p>具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Error</span>: EXDEV: cross-device link not permitted, rename <span class="string">'C:\Users\Simple_Y\AppData\Local\Temp\12920-ww17q9.vtx0mb1emi.jpg'</span> -&gt;</div><div class="line">  <span class="string">'E:\杨宇杰_备份2\光盘资源\Node.js实战\code\8\photo_app\public\photos\281295.jpg'</span></div><div class="line">    at <span class="built_in">Error</span> (native)</div></pre></td></tr></table></figure>
<p>大致意思应该是说不能跨盘符上传文件，涉及到权限问题。</p>
<hr>
<h1 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h1><p>下面贴出我的代码(部分)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exports.submit = <span class="function"><span class="keyword">function</span> (<span class="params">dir</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> img = req.files.photo.image;</div><div class="line">    <span class="keyword">var</span> name = req.body.photo.name || img.name;</div><div class="line">    <span class="keyword">var</span> path = join(dir, img.name);</div><div class="line"></div><div class="line">    <span class="comment">//fs.rename(img.path, path, function(err)&#123;</span></div><div class="line">      <span class="comment">//if (err) return next(err);</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>经过百度，终于找到了解决办法：</p>
<p>将上面的注释掉的两行代码换成下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">fs.readFile(img.path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'File read!'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Write the file</span></div><div class="line">            fs.writeFile(path, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">                res.write(<span class="string">'File uploaded and moved!'</span>);</div><div class="line">                res.end();</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'File written!'</span>);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">// Delete the file</span></div><div class="line">            fs.unlink(img.path, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'File deleted!'</span>);</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>至此，运行程序，问题完美解决。</p>
<p>感谢万能的百度！</p>
<p>参考链接：<a href="https://stackoverflow.com/questions/37153666/error-exdev-cross-device-link-not-permitted-rename-tmp-on-ubuntu-16-04-lts" target="_blank" rel="external">https://stackoverflow.com/questions/37153666/error-exdev-cross-device-link-not-permitted-rename-tmp-on-ubuntu-16-04-lts</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在学习node.js，今天在写一个文件上传的功能，调用fs.rename上传文件时程序报了错。 &lt;/p&gt;
    
    </summary>
    
      <category term="node.js" scheme="https://okcthouder.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://okcthouder.github.io/tags/node-js/"/>
    
      <category term="fs.rename" scheme="https://okcthouder.github.io/tags/fs-rename/"/>
    
      <category term="文件跨域" scheme="https://okcthouder.github.io/tags/%E6%96%87%E4%BB%B6%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何理解javascript中的闭包</title>
    <link href="https://okcthouder.github.io/2017/07/24/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>https://okcthouder.github.io/2017/07/24/如何理解javascript中的闭包/</id>
    <published>2017-07-24T08:09:29.000Z</published>
    <updated>2017-07-28T03:01:26.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
</blockquote>
 <a id="more"></a>
<h3 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h3><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p>
<p>变量的作用域无非就是两种：全局变量和局部变量。</p>
<p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<p>Js代码　</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line"></div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(n);</div><div class="line">　　&#125;</div><div class="line">　　f1(); <span class="comment">// 999</span></div></pre></td></tr></table></figure>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<p>Js代码　</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　alert(n); <span class="comment">// error</span></div></pre></td></tr></table></figure>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用<strong>var命令</strong>。如果不用的话，你实际上声明了一个全局变量！</p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　n=<span class="number">999</span>;</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　f1();</div><div class="line"></div><div class="line">　　alert(n); <span class="comment">// 999</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>
<p>那就是在函数的内部，再定义一个函数。</p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n); <span class="comment">// 999</span></div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1 就是不可见的。这就是Javascript语言特有的“链式作用域”结构（chain scope），</p>
<p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line"></div><div class="line">　　result(); <span class="comment">// 999</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h3><p>上一节代码中的f2函数，就是闭包。</p>
<p>各种专业文献上的“闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。</p>
<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<hr>
<h3 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<p>怎么来理解这句话呢？请看下面的代码。</p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">    </div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line"></div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line"></div><div class="line">　　nAdd();</div><div class="line"></div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>
<p>这段代码中另一个值得注意的地方，就是“nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个</p>
<p>匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<hr>
<h3 id="五、使用闭包的注意点"><a href="#五、使用闭包的注意点" class="headerlink" title="五、使用闭包的注意点"></a>五、使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便</p>
<p>改变父函数内部变量的值。</p>
<hr>
<h3 id="六、思考题"><a href="#六、思考题" class="headerlink" title="六、思考题"></a>六、思考题</h3><p>如果你能理解下面代码的运行结果，应该就算理解闭包的运行机制了。</p>
<p>Js代码 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> name = <span class="string">"The Window"</span>;   </div><div class="line"></div><div class="line">　　<span class="keyword">var</span> object = &#123;   </div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,   </div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;   </div><div class="line">　　　　　&#125;;   </div><div class="line">　　　　&#125;   </div><div class="line">&#125;;   </div><div class="line"></div><div class="line">alert(object.getNameFunc()());  <span class="comment">//The Window</span></div></pre></td></tr></table></figure>
<p><strong>常见的陷阱</strong></p>
<p>看看这个：</p>
<p>乍一看，以为输出 0~9 ，万万没想到输出10个10？</p>
<p>这里的陷阱就是：<strong>函数带()才是执行函数！</strong> 单纯的一句 var f = function() { alert(‘Hi’); }; 是不会弹窗的，后面接一句 f(); 才会执行函数内部的代码。上面代码翻译一下就是：</p>
<p>为什么只垃圾回收了 result，但却不收了 i 呢？ 因为 i 还在被 function 引用着啊。好比一个餐厅，盘子总是有限的，所以服务员会去巡台回收空盘子，但还装着菜的盘子他怎么敢收？ 当然，你自己手动倒掉了盘子里面的菜（=null），那盘子就会被收走了，这就是所谓的内存回收机制。</p>
<p>至于 i 的值怎么还能保留，其实从文章开头一路读下来，这应该没有什么可以纠结的地方。盘子里面的菜，吃了一块不就应该少一块吗？</p>
<hr>
<p><strong>JavaScript闭包例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a=<span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">   a++;</div><div class="line">   alert(a);</div><div class="line">  &#125;    </div><div class="line"> &#125;</div><div class="line">innerFun();</div></pre></td></tr></table></figure>
<p>上面的代码是错误的.innerFun()的作用域在outerFun()内部,所在outerFun()外部调用它是错误的.</p>
<p>改成如下,也就是闭包:</p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> a=<span class="number">0</span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  a++;</div><div class="line">  alert(a);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> innerFun;  <span class="comment">//注意这里</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj=outerFun();</div><div class="line"></div><div class="line">obj();  <span class="comment">//结果为1</span></div><div class="line"></div><div class="line">obj();  <span class="comment">//结果为2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2=outerFun();</div><div class="line"></div><div class="line">obj2();  <span class="comment">//结果为1</span></div><div class="line"></div><div class="line">obj2();  <span class="comment">//结果为2</span></div></pre></td></tr></table></figure>
<p>什么是闭包:</p>
<p>当内部函数 在定义它的作用域 的外部 被引用时,就创建了该内部函数的闭包 ,如果内部函数引用了位于外部函数的变量,当外部函数调用完毕后,这些变量在内存不会被 释放,因为闭包需要它们.</p>
<hr>
<p><strong>再来看一个例子</strong></p>
<p>Js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> a =<span class="number">0</span>;</div><div class="line"> alert(a);  </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</div><div class="line"></div><div class="line">outerFun();</div><div class="line"></div><div class="line">alert(a);</div></pre></td></tr></table></figure>
<p>结果是 0,4 .  因为在函数内部使用了var关键字 维护a的作用域在outFun()内部.</p>
<p>再看下面的代码:</p>
<p>Js代码 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="comment">//没有var </span></div><div class="line"> a =<span class="number">0</span>;</div><div class="line"> alert(a);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a=<span class="number">4</span>;</div><div class="line"></div><div class="line">outerFun();</div><div class="line"></div><div class="line">alert(a);</div></pre></td></tr></table></figure>
<p>结果为 0,0 真是奇怪,为什么呢?</p>
<p>作用域链是描述一种路径的术语,沿着该路径可以确定变量的值 .当执行a=0时,因为没有使用var关键字,因此赋值操作会沿着作用域链到var a=4;  并改变其值.</p>
<p>-————————————————————————————————————————————————-</p>
<p>如果你对javascript闭包还不是很理解，那么请看下面转载的文章：(转载:<a href="http://www.felixwoo.com/archives/247" target="_blank" rel="external">http://www.felixwoo.com/archives/247</a>)</p>
<h3 id="七、什么是闭包？"><a href="#七、什么是闭包？" class="headerlink" title="七、什么是闭包？"></a>七、什么是闭包？</h3><p>官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br>相信很少有人能直接看懂这句话，因为他描述的太学术。其实这句话通俗的来说就是：<strong>JavaScript中所有的function都是一个闭包</strong>。不过一般来说，嵌套的function所产生的闭包更为强大，也是大部分时候我们所谓的“闭包”。看下面这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; </div><div class="line"> <span class="keyword">var</span> i = <span class="number">0</span>; </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123; alert(++i); &#125; </div><div class="line"> <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = a();</div><div class="line">c();</div></pre></td></tr></table></figure>
<p>这段代码有两个特点：</p>
<p>1、函数b嵌套在函数a内部；</p>
<p>2、函数a返回函数b。</p>
<p>引用关系如图：</p>
<p><img src="http://files.jb51.net/upload/201007/20100703001016918.jpg" alt="img"></p>
<p>　　这样在执行完var c=a()后，变量c实际上是指向了函数b，再执行c()后就会弹出一个窗口显示i的值(第一次为1)。这段代码其实就创建了一个闭包，为什么？因为函数a外的变量c引用了函数a内的函数b，就是说：</p>
<p>　　<strong>当函数a的内部函数b被函数a外的一个变量引用的时候，就创建了一个闭包。</strong></p>
<p>　　让我们说的更透彻一些。所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。</p>
<h3 id="八、闭包有什么作用？"><a href="#八、闭包有什么作用？" class="headerlink" title="八、闭包有什么作用？"></a>八、闭包有什么作用？</h3><p>　　简而言之，闭包的作用就是在a执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源，因为a的内部函数b的执行需要依赖a中的变量。这是对闭包作用的非常直白的描述，不专业也不严谨，但大概意思就是这样，理解闭包需要循序渐进的过程。</p>
<p>在上面的例子中，由于闭包的存在使得函数a返回后，a中的i始终存在，这样每次执行c()，i都是自加1后alert出i的值。</p>
<p>　　那 么我们来想象另一种情况，如果a返回的不是函数b，情况就完全不同了。因为a执行完后，b没有被返回给a的外界，只是被a所引用，而此时a也只会被b引 用，因此函数a和b互相引用但又不被外界打扰(被外界引用)，函数a和b就会被GC回收。(关于Javascript的垃圾回收机制将在后面详细介绍)</p>
<h3 id="九、闭包内的微观世界"><a href="#九、闭包内的微观世界" class="headerlink" title="九、闭包内的微观世界"></a>九、闭包内的微观世界</h3><p>　　如果要更加深入的了解闭包以及函数a和嵌套函数b的关系，我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。以函数a从定义到执行的过程为例阐述这几个概念。</p>
<ol>
<li>当<strong>定义</strong>函数a的时候，js解释器会将函数a的<strong>作用域链(scope chain)</strong>设置为<strong>定义a时a所在的“环境”</strong>，如果a是一个全局函数，则scope chain中只有window对象。</li>
<li>当<strong>执行</strong>函数a的时候，a会进入相应的<strong>执行环境(excution context)</strong>。</li>
<li>在创建执行环境的过程中，首先会为a添加一个scope属性，即a的<strong>作用域</strong>，其值就为第1步中的scope chain。即a.scope=a的作用域链。</li>
<li>然后执行环境会创建一个<strong>活动对象(call object)</strong>。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。</li>
<li>下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。</li>
<li>最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。</li>
</ol>
<p>到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。</p>
<p>当函数b执行的时候亦会像以上步骤一样。因此，执行时b的作用域链包含了3个对象：b的活动对象、a的活动对象和window对象，如下图所示：</p>
<p><img src="http://files.jb51.net/upload/201007/20100703001017585.jpg" alt="img"></p>
<p>如图所示，当在函数b中访问一个变量的时候，搜索顺序是：</p>
<ol>
<li>先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依次查找，直到找到为止。</li>
<li>如果函数b存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。</li>
<li>如果整个作用域链上都无法找到，则返回undefined。</li>
</ol>
<p>小结，本段中提到了两个重要的词语：函数的<strong>定义</strong>与<strong>执行</strong>。文中提到函数的作用域是在定义函数时候就已经确定，而不是在执行的时候确定（参看步骤1和3）。用一段代码来说明这个问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function f(x) &#123; </div><div class="line">  var g = function () &#123; return x; &#125;</div><div class="line">  return g;</div><div class="line">&#125;</div><div class="line">var h = f(1);</div><div class="line">alert(h());</div></pre></td></tr></table></figure>
<p>这段代码中变量h指向了f中的那个匿名函数(由g返回)。</p>
<ul>
<li>假设函数h的作用域是在执行alert(h())确定的，那么此时h的作用域链是：h的活动对象-&gt;alert的活动对象-&gt;window对象。</li>
<li>假设函数h的作用域是在定义时确定的，就是说h指向的那个匿名函数在定义的时候就已经确定了作用域。那么在执行的时候，h的作用域链为：h的活动对象-&gt;f的活动对象-&gt;window对象。</li>
</ul>
<p>如果第一种假设成立，那输出值就是undefined；如果第二种假设成立，输出值则为1。</p>
<p>运行结果证明了第2个假设是正确的，说明函数的作用域确实是在定义这个函数的时候就已经确定了。</p>
<h3 id="十、闭包的应用场景"><a href="#十、闭包的应用场景" class="headerlink" title="十、闭包的应用场景"></a>十、闭包的应用场景</h3><p>保护函数内的变量安全。以最开始的例子为例，函数a中i只有函数b才能访问，而无法通过其他途径访问到，因此保护了i的安全性。</p>
<ol>
<li><p>在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，因此每次执行c()，都会给i自加1。</p>
</li>
<li><p>通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）</p>
<p>​</p>
<p>私有属性和方法在Constructor外是无法被访问的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params">...</span>) </span>&#123;  </div><div class="line">  </div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;  </div><div class="line"></div><div class="line">  <span class="keyword">var</span> membername = value; </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">membername</span>(<span class="params">...</span>) </span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上3点是闭包最基本的应用场景，很多经典案例都源于此。</p>
<h3 id="十一、Javascript的垃圾回收机制"><a href="#十一、Javascript的垃圾回收机制" class="headerlink" title="十一、Javascript的垃圾回收机制"></a>十一、Javascript的垃圾回收机制</h3><p>在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么函数a执行后不会被回收的原因。</p>
<h3 id="十二、结语"><a href="#十二、结语" class="headerlink" title="十二、结语"></a>十二、结语</h3><p>理解JavaScript的闭包是迈向高级JS程序员的必经之路，理解了其解释和运行机制才能写出更为安全和优雅的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://okcthouder.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://okcthouder.github.io/tags/javascript/"/>
    
      <category term="闭包" scheme="https://okcthouder.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="funtion" scheme="https://okcthouder.github.io/tags/funtion/"/>
    
  </entry>
  
  <entry>
    <title>VMwave Workstation12虚拟机安装OS X 10.11所遇到的各种问题集合(详细版)</title>
    <link href="https://okcthouder.github.io/2017/07/24/10-11%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88-%E8%AF%A6%E7%BB%86%E7%89%88/"/>
    <id>https://okcthouder.github.io/2017/07/24/10-11所遇到的各种问题集合-详细版/</id>
    <published>2017-07-24T08:09:29.000Z</published>
    <updated>2017-09-05T07:59:24.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近笔者闲着无聊，由于一直挺仰慕mac大法，所以想装个mac系统来玩玩。虽然说过程不是很难，但是出现的各种小问题还是挺多的，所以在这里跟大家分享一下我的解决方法。</p>
<p>1.首先，当然是安装工具：</p>
<ul>
<li>Mac OS X 10.11 镜像文件（链接：<a href="http://pan.baidu.com/s/1pL8HE59" target="_blank" rel="external">http://pan.baidu.com/s/1pL8HE59</a> 密码：cq4d）（此镜像为网络收集，如果觉得有问题自己找谢谢。）</li>
<li>unlocker208文件（链接：<a href="http://pan.baidu.com/s/1bpftVjT" target="_blank" rel="external">http://pan.baidu.com/s/1bpftVjT</a> 密码：dp2g）</li>
<li>VMware Workstation12（<a href="http://blog.sina.com.cn/s/blog_af49f8090102wqmw.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_af49f8090102wqmw.html</a>）</li>
</ul>
<p>2.详细教程请查看：<a href="http://jingyan.baidu.com/article/363872ec206a356e4ba16f30.html" target="_blank" rel="external">http://jingyan.baidu.com/article/363872ec206a356e4ba16f30.html</a></p>
<p>在这里我就不再赘述。</p>
 <a id="more"></a>
<h2 id="二、所遇到的问题"><a href="#二、所遇到的问题" class="headerlink" title="二、所遇到的问题"></a>二、所遇到的问题</h2><p>下面来看看我安装后遇到的各种问题：</p>
<h2 id="1-VMware上MAC虚拟机不能上网问题"><a href="#1-VMware上MAC虚拟机不能上网问题" class="headerlink" title="1)  VMware上MAC虚拟机不能上网问题"></a>1)  VMware上MAC虚拟机不能上网问题</h2><p>首先最大的问题当然就是没网啦，别急，且听我慢慢道来：</p>
<h3 id="解决方法-步骤"><a href="#解决方法-步骤" class="headerlink" title="解决方法/步骤"></a>解决方法/步骤</h3><h4 id="1-从本机中选择打开连接网络，选择本地连接。如果是无线网可以选择无线网。"><a href="#1-从本机中选择打开连接网络，选择本地连接。如果是无线网可以选择无线网。" class="headerlink" title="1.从本机中选择打开连接网络，选择本地连接。如果是无线网可以选择无线网。"></a>1.从本机中选择打开连接网络，选择本地连接。如果是无线网可以选择无线网。</h4><p><img src="http://img.blog.csdn.net/20170424190230322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="2-选择属性，点击共享按钮。"><a href="#2-选择属性，点击共享按钮。" class="headerlink" title="2.选择属性，点击共享按钮。"></a>2.选择属性，点击共享按钮。</h4><p><img src="http://img.blog.csdn.net/20170424190316370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="3-将internet连接共享下面两个选项都选中，然后在家庭网络连接选择VMware-Network-Adapter-VMnet1。"><a href="#3-将internet连接共享下面两个选项都选中，然后在家庭网络连接选择VMware-Network-Adapter-VMnet1。" class="headerlink" title="3.将internet连接共享下面两个选项都选中，然后在家庭网络连接选择VMware Network Adapter VMnet1。"></a>3.将internet连接共享下面两个选项都选中，然后在家庭网络连接选择VMware Network Adapter VMnet1。</h4><p><img src="http://img.blog.csdn.net/20170430203759981?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="4-在安装的虚拟机中选择虚拟机-gt-设置选项。"><a href="#4-在安装的虚拟机中选择虚拟机-gt-设置选项。" class="headerlink" title="4.在安装的虚拟机中选择虚拟机-&gt;设置选项。"></a>4.在安装的虚拟机中选择虚拟机-&gt;设置选项。</h4><p><img src="http://img.blog.csdn.net/20170424190515128?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="5-点击网络适配器，将网络连接改成仅主机模式（Host-only），然后在右侧选择主机模式，点击确定。"><a href="#5-点击网络适配器，将网络连接改成仅主机模式（Host-only），然后在右侧选择主机模式，点击确定。" class="headerlink" title="5.点击网络适配器，将网络连接改成仅主机模式（Host-only），然后在右侧选择主机模式，点击确定。"></a>5.点击网络适配器，将网络连接改成仅主机模式（Host-only），然后在右侧选择主机模式，点击确定。</h4><p><img src="http://img.blog.csdn.net/20170424190604613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="6-进入Mac系统，选择设置，进入网络设置"><a href="#6-进入Mac系统，选择设置，进入网络设置" class="headerlink" title="6.进入Mac系统，选择设置，进入网络设置"></a>6.进入Mac系统，选择设置，进入网络设置</h4><p><img src="http://img.blog.csdn.net/20170424190642379?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="7-配置Ipv4选择设置DHCP，点击应用即可开始上网。"><a href="#7-配置Ipv4选择设置DHCP，点击应用即可开始上网。" class="headerlink" title="7.配置Ipv4选择设置DHCP，点击应用即可开始上网。"></a>7.配置Ipv4选择设置DHCP，点击应用即可开始上网。</h4><h2 id="2-OS-X-10-11-El-Capitan-无法连接Apple-store-和登录Apple-ID的问题"><a href="#2-OS-X-10-11-El-Capitan-无法连接Apple-store-和登录Apple-ID的问题" class="headerlink" title="2)OS X 10.11 El Capitan 无法连接Apple store 和登录Apple ID的问题"></a>2)<a href="http://blog.csdn.net/qq_25131687/article/details/52194202" target="_blank" rel="external">OS X 10.11 El Capitan 无法连接Apple store 和登录Apple ID的问题</a></h2><h4 id="1-step-1"><a href="#1-step-1" class="headerlink" title="1.step 1"></a>1.step 1</h4><p>强制退出Apple store进程</p>
<h4 id="2-step-2"><a href="#2-step-2" class="headerlink" title="2. step 2"></a>2. step 2</h4><p>打开terminal终端（在launch中搜索终端），输入以下命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo pkill <span class="number">-9</span> -f Account    </div><div class="line"></div><div class="line">sudo rm $HOME/Library/Accounts<span class="comment">/*</span></div></pre></td></tr></table></figure>
<p> 进行此操作时需要提供管理员密码，输入密码敲回车就行了。</p>
<h4 id="3-step-3"><a href="#3-step-3" class="headerlink" title="3.step 3"></a>3.step 3</h4><p>完成前面两步你已经可以进入apple store了，但是你发现你的apple ID无法登陆：</p>
<p>This action cant be Completed!</p>
<p>这时你可以terminal终端输入以下命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /Users/Shared     </div><div class="line"></div><div class="line">sudo chown root:wheel /Users/Shared    </div><div class="line"></div><div class="line">sudo chmod -R <span class="number">1777</span> /Users/Shared</div></pre></td></tr></table></figure>
<p>至此，你的Apple ID就可以在Apple store上Login了。</p>
<h2 id="3-苹果ID注册最后一步总是显示-如需帮助，请联系iTunes支持"><a href="#3-苹果ID注册最后一步总是显示-如需帮助，请联系iTunes支持" class="headerlink" title="3)苹果ID注册最后一步总是显示 如需帮助，请联系iTunes支持"></a>3)苹果ID注册最后一步总是显示 如需帮助，请联系iTunes支持</h2><p>由于我的apple id是刚刚注册的，登陆apple store后提示我还没有完善资料什么的，所以我就去填资料</p>
<p>填完资料发现老是出现上面的那一句，继续不了。</p>
<p>所以我又开始了尝试</p>
<h4 id="1-首先在iTunes软件上面注册Apple-ID帐号时，注意要把提供付款方式选择为“银联UnionPay”，目前因为iTunes软件版本更新了不能像以前那样不绑定银行卡就可以注册Apple-ID帐号。"><a href="#1-首先在iTunes软件上面注册Apple-ID帐号时，注意要把提供付款方式选择为“银联UnionPay”，目前因为iTunes软件版本更新了不能像以前那样不绑定银行卡就可以注册Apple-ID帐号。" class="headerlink" title="1.首先在iTunes软件上面注册Apple ID帐号时，注意要把提供付款方式选择为“银联UnionPay”，目前因为iTunes软件版本更新了不能像以前那样不绑定银行卡就可以注册Apple ID帐号。"></a>1.首先在iTunes软件上面注册Apple ID帐号时，注意要把提供<a href="https://www.baidu.com/s?wd=%E4%BB%98%E6%AC%BE%E6%96%B9%E5%BC%8F&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Yvm1TLPvn3PWw9mynLrj640ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnW0dnWc1nHn4PHfsnWT3Pj6zPs" target="_blank" rel="external">付款方式</a>选择为“<a href="https://www.baidu.com/s?wd=%E9%93%B6%E8%81%94&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Yvm1TLPvn3PWw9mynLrj640ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnW0dnWc1nHn4PHfsnWT3Pj6zPs" target="_blank" rel="external">银联</a>UnionPay”，目前因为iTunes软件版本更新了不能像以前那样不绑定银行卡就可以注册Apple ID帐号。</h4><p><img src="http://img.blog.csdn.net/20170424190735973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="2-然后填写银行卡以及输入银行预留手机号码。-注意：手机号码一定是要和银行卡绑定在一起的才可以使用。"><a href="#2-然后填写银行卡以及输入银行预留手机号码。-注意：手机号码一定是要和银行卡绑定在一起的才可以使用。" class="headerlink" title="2.然后填写银行卡以及输入银行预留手机号码。(注意：手机号码一定是要和银行卡绑定在一起的才可以使用。)"></a>2.然后填写银行卡以及输入银行预留手机号码。(注意：手机号码一定是要和银行卡绑定在一起的才可以使用。)</h4><p><img src="http://img.blog.csdn.net/20170424190825299?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="3-接下来在帐单寄送地址下方依次将个人的姓、名、街道地址、所在地区、邮编、省份、手机号码填写正确完整。"><a href="#3-接下来在帐单寄送地址下方依次将个人的姓、名、街道地址、所在地区、邮编、省份、手机号码填写正确完整。" class="headerlink" title="3.接下来在帐单寄送地址下方依次将个人的姓、名、街道地址、所在地区、邮编、省份、手机号码填写正确完整。"></a>3.接下来在帐单寄送地址下方依次将个人的姓、名、街道地址、所在地区、邮编、省份、手机号码填写正确完整。</h4><p><img src="http://img.blog.csdn.net/20170424190901802?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="4-点击创建Apple-ID，进入下一步。"><a href="#4-点击创建Apple-ID，进入下一步。" class="headerlink" title="4.点击创建Apple ID，进入下一步。"></a>4.点击创建Apple ID，进入下一步。</h4><p><img src="http://img.blog.csdn.net/20170424190938535?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="5-然后收取绑定银行的短信验证码输入里面进行验证。"><a href="#5-然后收取绑定银行的短信验证码输入里面进行验证。" class="headerlink" title="5.然后收取绑定银行的短信验证码输入里面进行验证。"></a>5.然后收取绑定银行的<a href="https://www.baidu.com/s?wd=%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Yvm1TLPvn3PWw9mynLrj640ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnW0dnWc1nHn4PHfsnWT3Pj6zPs" target="_blank" rel="external">短信验证码</a>输入里面进行验证。</h4><p><img src="http://img.blog.csdn.net/20170424191016740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>填入验证码就可以完美解决，我也试过用银行卡的方式，但是还是不行，最后尝试了银联这个就OK了。</p>
<h2 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h2><p>对了，补充一下，可能安装后会发现虚拟机没办法占全屏，只要安装VMwave Tools既可以完美解决，至于卡顿问题，我笔记本是8G内存，我分了4G在虚拟机，相对来说比较不卡，也可以下载一个叫做beamoff的工具,在mac osx下解压即可消除卡顿的感觉。</p>
<p>下载链接 :   <a href="http://download.csdn.net/detail/u013803262/9702291" target="_blank" rel="external">http://download.csdn<strong>.NET</strong>/detail/u013803262/9702291</a></p>
<p>具体解决方法参考：<a href="http://blog.csdn.net/u013803262/article/details/53467693" target="_blank" rel="external">http://blog.csdn.net/u013803262/article/details/53467693</a></p>
<p>好了，以上就是我装mac虚拟机所遇到的比较难缠的问题，分享给大家一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;最近笔者闲着无聊，由于一直挺仰慕mac大法，所以想装个mac系统来玩玩。虽然说过程不是很难，但是出现的各种小问题还是挺多的，所以在这里跟大家分享一下我的解决方法。&lt;/p&gt;
&lt;p&gt;1.首先，当然是安装工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.11 镜像文件（链接：&lt;a href=&quot;http://pan.baidu.com/s/1pL8HE59&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1pL8HE59&lt;/a&gt; 密码：cq4d）（此镜像为网络收集，如果觉得有问题自己找谢谢。）&lt;/li&gt;
&lt;li&gt;unlocker208文件（链接：&lt;a href=&quot;http://pan.baidu.com/s/1bpftVjT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pan.baidu.com/s/1bpftVjT&lt;/a&gt; 密码：dp2g）&lt;/li&gt;
&lt;li&gt;VMware Workstation12（&lt;a href=&quot;http://blog.sina.com.cn/s/blog_af49f8090102wqmw.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_af49f8090102wqmw.html&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.详细教程请查看：&lt;a href=&quot;http://jingyan.baidu.com/article/363872ec206a356e4ba16f30.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jingyan.baidu.com/article/363872ec206a356e4ba16f30.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里我就不再赘述。&lt;/p&gt;
    
    </summary>
    
      <category term="装系统" scheme="https://okcthouder.github.io/categories/%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="VMwave" scheme="https://okcthouder.github.io/tags/VMwave/"/>
    
      <category term="OS X 10.11" scheme="https://okcthouder.github.io/tags/OS-X-10-11/"/>
    
      <category term="虚拟机" scheme="https://okcthouder.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>将应用程序部署到Heroku</title>
    <link href="https://okcthouder.github.io/2017/07/22/%E5%B0%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2%E5%88%B0Heroku/"/>
    <id>https://okcthouder.github.io/2017/07/22/将应用程序部署到Heroku/</id>
    <published>2017-07-22T07:51:23.000Z</published>
    <updated>2017-07-25T11:16:11.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h4><h5 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h5><p>在<a href="http://api/heroku.com/signup注册Hero帐号" target="_blank" rel="external">http://api/heroku.com/signup注册Hero帐号</a></p>
<h5 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h5><p>访问邮件中的链接并输入密码  </p>
<h5 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h5><p>从 <a href="http://devcenter.heroku.com/articles/quickstart#step_2_install_the_heroku_toolbelt" target="_blank" rel="external">http://devcenter.heroku.com/articles/quickstart#step_2_install_the_heroku_toolbelt</a> 为你的平台安装安装程序。   </p>
<h5 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h5><p>打开终端窗口并登陆到Heroku</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heroku login</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1.在app.js文件的顶部，添加如下行：</div><div class="line">var port = (process.env.PORT || 3000);</div><div class="line"></div><div class="line">2.将下列行从app.js中移除:</div><div class="line">app.listen(3000);</div><div class="line"></div><div class="line">3.用下列行替换它：</div><div class="line">app.listen(port);</div><div class="line"></div><div class="line">4.在应用程序的根目录中，添加一个名为Procfile的文件并加入如下内容：</div><div class="line">web: node app.js</div><div class="line"></div><div class="line">5.用如下命令安装依赖模块：</div><div class="line">npm install</div><div class="line"></div><div class="line">6.启动应用程序并检查其是否运行正常：</div><div class="line">node app.js</div></pre></td></tr></table></figure>
<h4 id="3-将应用程序提交到heroku"><a href="#3-将应用程序提交到heroku" class="headerlink" title="3.将应用程序提交到heroku"></a>3.将应用程序提交到heroku</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">3.1使用如下命令创建Git库：</div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;initial commit&quot;</div><div class="line"></div><div class="line">3.2使用如下命令在Heroku上创建应用程序。注意从这一命令返回的URL:</div><div class="line">heroku create --stack cedar</div><div class="line"></div><div class="line">3.3用如下命令将站点发布到Heroku：</div><div class="line">git push heroku master</div><div class="line"></div><div class="line">3.4访问之前得到的URL，可看到所部署的网站了！</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-注册&quot;&gt;&lt;a href=&quot;#1-注册&quot; class=&quot;headerlink&quot; title=&quot;1.注册&quot;&gt;&lt;/a&gt;1.注册&lt;/h4&gt;&lt;h5 id=&quot;1-1&quot;&gt;&lt;a href=&quot;#1-1&quot; class=&quot;headerlink&quot; title=&quot;1.1&quot;&gt;&lt;/a&gt;1.1&lt;/h5&gt;&lt;p&gt;在&lt;a href=&quot;http://api/heroku.com/signup注册Hero帐号&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://api/heroku.com/signup注册Hero帐号&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-2&quot;&gt;&lt;a href=&quot;#1-2&quot; class=&quot;headerlink&quot; title=&quot;1.2&quot;&gt;&lt;/a&gt;1.2&lt;/h5&gt;&lt;p&gt;访问邮件中的链接并输入密码  &lt;/p&gt;
&lt;h5 id=&quot;1-3&quot;&gt;&lt;a href=&quot;#1-3&quot; class=&quot;headerlink&quot; title=&quot;1.3&quot;&gt;&lt;/a&gt;1.3&lt;/h5&gt;&lt;p&gt;从 &lt;a href=&quot;http://devcenter.heroku.com/articles/quickstart#step_2_install_the_heroku_toolbelt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://devcenter.heroku.com/articles/quickstart#step_2_install_the_heroku_toolbelt&lt;/a&gt; 为你的平台安装安装程序。   &lt;/p&gt;
&lt;h5 id=&quot;1-4&quot;&gt;&lt;a href=&quot;#1-4&quot; class=&quot;headerlink&quot; title=&quot;1.4&quot;&gt;&lt;/a&gt;1.4&lt;/h5&gt;&lt;p&gt;打开终端窗口并登陆到Heroku&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;heroku login&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="node.js" scheme="https://okcthouder.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://okcthouder.github.io/tags/node-js/"/>
    
      <category term="Heroku" scheme="https://okcthouder.github.io/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(六)</title>
    <link href="https://okcthouder.github.io/2017/07/20/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>https://okcthouder.github.io/2017/07/20/Oracle学习笔记-六/</id>
    <published>2017-07-20T08:13:29.000Z</published>
    <updated>2017-07-23T08:18:02.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="46-异常"><a href="#46-异常" class="headerlink" title="46.异常"></a>46.异常</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span></div><div class="line"></div><div class="line">            v_temp <span class="built_in">number</span>(<span class="number">4</span>);</div><div class="line"></div><div class="line">     <span class="keyword">begin</span></div><div class="line"></div><div class="line">            <span class="keyword">select</span> empno <span class="keyword">into</span> v_temp <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span>;</div><div class="line"></div><div class="line">     exception</div><div class="line"></div><div class="line">            when too_many_rows then</div><div class="line"></div><div class="line">                   dbms_output.put_line('太多记录了');</div><div class="line"></div><div class="line">            when others then</div><div class="line"></div><div class="line">                   dbms_output.put_line('error'); </div><div class="line"></div><div class="line">     <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
  <a id="more"></a>
<h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_tempnumber(<span class="number">4</span>);</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">select</span> empno <span class="keyword">into</span> v_temp <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">2222</span>;</div><div class="line"></div><div class="line">       exception</div><div class="line"></div><div class="line">              when no_data_found then</div><div class="line"></div><div class="line">                     dbms_output.put_line('没有该项数据');</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">----------------错误记录日志(用表记录：将系统日志存到数据库便于以后查看) -----------</span></div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">	   创建序列（用来处理递增的ＩＤ）：</div><div class="line"></div><div class="line">       <span class="keyword">create</span> <span class="keyword">sequence</span> seq_errorlog_id <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span> <span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">       创建日志表:</div><div class="line"></div><div class="line">       <span class="keyword">create</span> <span class="keyword">table</span> errorlog</div><div class="line"></div><div class="line">       (</div><div class="line"></div><div class="line">       <span class="keyword">id</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,</div><div class="line"></div><div class="line">       errcode <span class="built_in">number</span>,</div><div class="line"></div><div class="line">       errmsg varchar2(<span class="number">1024</span>),</div><div class="line"></div><div class="line">       errdate <span class="built_in">date</span></div><div class="line"></div><div class="line">       );</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">       示例程序：</div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_deptno dept.deptno%<span class="keyword">type</span> := <span class="number">10</span>;</div><div class="line"></div><div class="line">              v_errcode  number;</div><div class="line"></div><div class="line">              v_errmsg varchar2(1024);</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> deptno = v_deptno;</div><div class="line"></div><div class="line">          <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">       exception</div><div class="line"></div><div class="line">              when others then</div><div class="line"></div><div class="line">                     <span class="keyword">rollback</span>;</div><div class="line"></div><div class="line">                            v_errcode:= SQLCODE;</div><div class="line"></div><div class="line">                            v_errmsg:= SQLERRM;</div><div class="line"></div><div class="line">              <span class="keyword">insert</span> <span class="keyword">into</span> errorlog <span class="keyword">values</span> (seq_errorlog_id.nextval, v_errcode,v_errmsg, <span class="keyword">sysdate</span>);</div><div class="line"></div><div class="line">                            <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h3 id="47-PL-SQL中的重点cursor-游标-和指针的概念差不多"><a href="#47-PL-SQL中的重点cursor-游标-和指针的概念差不多" class="headerlink" title="47. PL/SQL中的重点cursor(游标)和指针的概念差不多"></a>47. PL/SQL中的重点cursor(游标)和指针的概念差不多</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span></div><div class="line"></div><div class="line">              cursorc <span class="keyword">is</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp; //此处的语句不会立刻执行，而是当下面的open c的时候，才会真正去数据库中取数据</div><div class="line"></div><div class="line">              v_emp c%rowtype;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">open</span> c;</div><div class="line"></div><div class="line">                     fetch c into v_emp;</div><div class="line"></div><div class="line">dbms_output.put_line(v_emp.ename); //这样会只输出一条数据 134将使用循环的方法输出每一条记录</div><div class="line"></div><div class="line">         close c;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">----------------------使用do while  循环遍历游标中的每一个数据---------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              <span class="keyword">cursor</span> c <span class="keyword">is</span></div><div class="line"></div><div class="line">                     <span class="keyword">select</span>* <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line">              v_emp c%rowtype;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">open</span> c;    </div><div class="line"></div><div class="line">              loop</div><div class="line"></div><div class="line">                     fetch c into v_emp;</div><div class="line"></div><div class="line">(1)   exit when(c%notfound);  //notfound是oracle中的关键字，作用是判断是否还有下一条数据</div><div class="line"></div><div class="line">(2)   dbms_output.put_line(v_emp.ename);  //(1)(2)的顺序不能颠倒，否则会把最后一条结果再多打印一次。</div><div class="line"></div><div class="line">          <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">          close c;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">------------------------使用while循环，遍历游标---------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              <span class="keyword">cursor</span> c <span class="keyword">is</span></div><div class="line"></div><div class="line">                     <span class="keyword">select</span>* <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line">              v_emp emp%rowtype;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">open</span> c;</div><div class="line"></div><div class="line">              fetch c into v_emp;</div><div class="line"></div><div class="line">              while(c%found) loop</div><div class="line"></div><div class="line">                 dbms_output.put_line(v_emp.ename);</div><div class="line"></div><div class="line">                 fetch c into v_emp;</div><div class="line"></div><div class="line">          <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">          close c;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;s</div><div class="line"></div><div class="line"><span class="comment">------------------------使用for 循环，遍历游标（最方便快捷的方法！）-----------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              cursorc <span class="keyword">is</span></div><div class="line"></div><div class="line">                 <span class="keyword">select</span> * <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">for</span> v_emp <span class="keyword">in</span> c <span class="keyword">loop</span></div><div class="line"></div><div class="line">                     dbms_output.put_line(v_emp.ename);</div><div class="line"></div><div class="line">              endloop;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h4 id="带参数的游标（相当于函数）"><a href="#带参数的游标（相当于函数）" class="headerlink" title="带参数的游标（相当于函数）"></a>带参数的游标（相当于函数）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span></div><div class="line"></div><div class="line">       <span class="keyword">cursor</span> c(v_deptno emp.deptno%<span class="keyword">type</span>, v_job emp.job%<span class="keyword">type</span>)</div><div class="line"></div><div class="line">       <span class="keyword">is</span></div><div class="line"></div><div class="line">          <span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=v_deptno <span class="keyword">and</span> job=v_job; </div><div class="line"></div><div class="line"><span class="keyword">begin</span></div><div class="line"></div><div class="line">       forv_temp <span class="keyword">in</span> c(<span class="number">30</span>, <span class="string">'CLERK'</span>) <span class="keyword">loop</span></div><div class="line"></div><div class="line">              dbms_output.put_line(v_temp.ename);</div><div class="line"></div><div class="line">       endloop;</div><div class="line"></div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h4 id="可更新的游标"><a href="#可更新的游标" class="headerlink" title="可更新的游标"></a>可更新的游标</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span></div><div class="line"></div><div class="line">              cursorc </div><div class="line"></div><div class="line">              <span class="keyword">is</span></div><div class="line"></div><div class="line">                 <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">for</span> <span class="keyword">update</span>;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">          <span class="keyword">for</span> v_temp <span class="keyword">in</span> c <span class="keyword">loop</span></div><div class="line"></div><div class="line">              <span class="keyword">if</span>(v_temp.sal&lt; <span class="number">2000</span>) <span class="keyword">then</span></div><div class="line"></div><div class="line">                     <span class="keyword">update</span> emp2 <span class="keyword">set</span> sal = sal * <span class="number">2</span> <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> c;</div><div class="line"></div><div class="line">             elsif (v_temp.sal =5000) then</div><div class="line"></div><div class="line">              deletefrom emp2 where current of c;</div><div class="line"></div><div class="line">              <span class="keyword">end</span> <span class="keyword">if</span>;</div><div class="line"></div><div class="line">            <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">            <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h3 id="48-store-procedure存储过程-带有名字的程序块"><a href="#48-store-procedure存储过程-带有名字的程序块" class="headerlink" title="48. store procedure存储过程(带有名字的程序块)"></a>48. store procedure存储过程(带有名字的程序块)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">createor <span class="keyword">replace</span> <span class="keyword">procedure</span> p</div><div class="line"></div><div class="line">           <span class="keyword">is</span><span class="comment">--除了这两句替代declare，下面的语句全部都一样  </span></div><div class="line"></div><div class="line">        <span class="keyword">cursor</span> c <span class="keyword">is</span></div><div class="line"></div><div class="line">                  <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">for</span> <span class="keyword">update</span>;</div><div class="line"></div><div class="line">    <span class="keyword">begin</span></div><div class="line"></div><div class="line">         <span class="keyword">for</span> v_emp <span class="keyword">in</span> c <span class="keyword">loop</span></div><div class="line"></div><div class="line">           <span class="keyword">if</span>(v_emp.deptno= <span class="number">10</span>) <span class="keyword">then</span></div><div class="line"></div><div class="line">                  updateemp2 <span class="keyword">set</span> sal = sal +<span class="number">10</span> <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> c;</div><div class="line"></div><div class="line">           elseif(v_emp.deptno =20) then</div><div class="line"></div><div class="line">                  updateemp2 <span class="keyword">set</span> sal =  sal + <span class="number">20</span> <span class="keyword">where</span> <span class="keyword">current</span> ofc;</div><div class="line"></div><div class="line">           else</div><div class="line"></div><div class="line">                  updateemp2 <span class="keyword">set</span> sal = sal + <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> c;</div><div class="line"></div><div class="line">           endif;</div><div class="line"></div><div class="line">        <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">      <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">     <span class="keyword">end</span>;</div><div class="line"></div><div class="line">    执行存储过程的两种方法：</div><div class="line"></div><div class="line">    （1）exec p;(p是存储过程的名称)</div><div class="line"></div><div class="line">    （2）<span class="keyword">begin</span></div><div class="line"></div><div class="line">                  p;</div><div class="line"></div><div class="line">            <span class="keyword">end</span>;</div><div class="line"></div><div class="line">           /</div></pre></td></tr></table></figure>
<h4 id="带参数的存储过程"><a href="#带参数的存储过程" class="headerlink" title="带参数的存储过程"></a>带参数的存储过程</h4><p>先创建存储过程：（in标识传入参数，out标识传出参数，默认为传入参数）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">       createor <span class="keyword">replace</span> <span class="keyword">procedure</span> p</div><div class="line"></div><div class="line">              (v_ain <span class="built_in">number</span>, v_b <span class="built_in">number</span>, v_ret <span class="keyword">out</span> <span class="built_in">number</span>, v_temp inout <span class="built_in">number</span>)</div><div class="line"></div><div class="line">       <span class="keyword">is</span></div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">if</span>(v_a&gt; v_b) <span class="keyword">then</span></div><div class="line"></div><div class="line">                     v_ret:= v_a;</div><div class="line"></div><div class="line">              else</div><div class="line"></div><div class="line">                     v_ret:= v_b;</div><div class="line"></div><div class="line">              endif;</div><div class="line"></div><div class="line">              v_temp:= v_temp + 1;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line">再调用：</div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_a  <span class="built_in">number</span> := <span class="number">3</span>;</div><div class="line"></div><div class="line">              v_b  number := 4;</div><div class="line"></div><div class="line">              v_retnumber;</div><div class="line"></div><div class="line">              v_tempnumber := 5;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              p(v_a,v_b, v_ret, v_temp);</div><div class="line"></div><div class="line">              dbms_output.put_line(v_ret);</div><div class="line"></div><div class="line">              dbms_output.put_line(v_temp);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>​       dropprocedure p;</p>
<h3 id="49-创建函数计算个人所得税的税率"><a href="#49-创建函数计算个人所得税的税率" class="headerlink" title="49. 创建函数计算个人所得税的税率"></a>49. 创建<strong>函数</strong>计算个人所得税的税率</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">createor replace function sal_tax</div><div class="line"></div><div class="line">             (v_sal  number)    </div><div class="line"></div><div class="line">             returnnumber</div><div class="line"></div><div class="line">      is</div><div class="line"></div><div class="line">      begin</div><div class="line"></div><div class="line">             if(v_sal&lt; 2000) then</div><div class="line"></div><div class="line">                    return0.10;</div><div class="line"></div><div class="line">             elsif(v_sal&lt;2750) then</div><div class="line"></div><div class="line">                    return0.15;</div><div class="line"></div><div class="line">             else</div><div class="line"></div><div class="line">                    return0.20;</div><div class="line"></div><div class="line">             endif;</div><div class="line"></div><div class="line">      end;</div></pre></td></tr></table></figure>
<h3 id="50-创建触发器（trigger）"><a href="#50-创建触发器（trigger）" class="headerlink" title="50. 创建触发器（trigger）"></a>50. 创建触发器（trigger）</h3><p>触发器不能单独的存在，必须依附在某一张表上</p>
<p>写主语 谓语 宾语 游戏</p>
<p>​       创建触发器的依附表：       </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">     createtable emp2_log</div><div class="line"></div><div class="line">     (</div><div class="line"></div><div class="line">     enamevarchar2(30) ,</div><div class="line"></div><div class="line">     eactionvarchar2(20),</div><div class="line"></div><div class="line">     etimedate</div><div class="line"></div><div class="line">     );</div><div class="line">     <span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> trig</div><div class="line"></div><div class="line"><span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">delete</span> orupdate <span class="keyword">on</span> emp2 <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="comment">--加上此句，每更新一行，触发一次，不加入则值触发一次</span></div><div class="line"></div><div class="line">     <span class="keyword">begin</span></div><div class="line"></div><div class="line">            ifinserting <span class="keyword">then</span></div><div class="line"></div><div class="line">                   insertinto emp2_log <span class="keyword">values</span>(<span class="keyword">USER</span>, <span class="string">'insert'</span>, <span class="keyword">sysdate</span>);</div><div class="line"></div><div class="line">            elsifupdating then</div><div class="line"></div><div class="line">                   insertinto emp2_log values(USER, '<span class="keyword">update</span><span class="string">', sysdate);</span></div><div class="line"></div><div class="line">            elsifdeleting then</div><div class="line"></div><div class="line">                   insertinto emp2_log values(USER, '<span class="keyword">delete</span><span class="string">', sysdate);</span></div><div class="line"></div><div class="line">            endif;</div><div class="line"></div><div class="line">     end;</div></pre></td></tr></table></figure>
<h3 id="51-触发器用法之一：通过触发器更新约束的相关数据"><a href="#51-触发器用法之一：通过触发器更新约束的相关数据" class="headerlink" title="51.触发器用法之一：通过触发器更新约束的相关数据"></a>51.触发器用法之一：通过触发器更新约束的相关数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">createor <span class="keyword">replace</span> <span class="keyword">trigger</span> trig</div><div class="line"></div><div class="line">              afterupdate <span class="keyword">on</span> dept</div><div class="line"></div><div class="line">              foreach <span class="keyword">row</span></div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              updateemp <span class="keyword">set</span> deptno =:NEW.deptno <span class="keyword">where</span> deptno =: OLD.deptno;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line">       <span class="comment">--只编译不显示的解决办法 set serveroutput on;</span></div></pre></td></tr></table></figure>
<h3 id="52-通过创建存储过程完成递归"><a href="#52-通过创建存储过程完成递归" class="headerlink" title="52.通过创建存储过程完成递归"></a>52.通过创建存储过程完成递归</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">       createor replace procedure p(v_pid article.pid%type,v_level binary_integer) is</div><div class="line"></div><div class="line">              cursorc is select * from article where pid = v_pid;</div><div class="line"></div><div class="line">              v_preStrvarchar2(1024) := '';</div><div class="line"></div><div class="line">       begin</div><div class="line"></div><div class="line">         for i in 0..v_leave loop</div><div class="line"></div><div class="line">              v_preStr:= v_preStr || '';</div><div class="line"></div><div class="line">         end loop;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">         for v_article in c loop</div><div class="line"></div><div class="line">              dbms_output.put_line(v_article.cont);</div><div class="line"></div><div class="line">              if(v_article.isleaf= 0) then</div><div class="line"></div><div class="line">                     p(v_article.id);</div><div class="line"></div><div class="line">              endif;</div><div class="line"></div><div class="line">              endloop;</div><div class="line"></div><div class="line">       end;</div><div class="line"></div><div class="line">-------------------------------查看当前用户下有哪些表---</div><div class="line"></div><div class="line">       首先，用这个用户登录然后使用语句：</div><div class="line"></div><div class="line">       select* from tab;</div><div class="line"></div><div class="line">       </div><div class="line"></div><div class="line">-----------------------------用Oracle进行分页！--------------</div><div class="line"></div><div class="line">       因为Oracle中的隐含字段rownum不支持'&gt;'所以：</div><div class="line"></div><div class="line">       select* from (</div><div class="line"></div><div class="line">              selectrownum rn, t.* from (</div><div class="line"></div><div class="line">                     select* from t_user where user_id &lt;&gt; 'root'</div><div class="line"></div><div class="line">              )t where rownum &lt;6</div><div class="line"></div><div class="line">       )where rn &gt;3</div><div class="line"></div><div class="line">------------------------Oracle下面的清屏命令----------------</div><div class="line"></div><div class="line">       clearscreen; 或者 cle scr;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">-----------将创建好的guohailong的这个用户的密码改为abc--------------</div><div class="line"></div><div class="line">   alter user guohailong identified by abc</div><div class="line"></div><div class="line">    --当密码使用的是数字的时候可能会不行</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;46-异常&quot;&gt;&lt;a href=&quot;#46-异常&quot; class=&quot;headerlink&quot; title=&quot;46.异常&quot;&gt;&lt;/a&gt;46.异常&lt;/h3&gt;&lt;h4 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;(1)&quot;&gt;&lt;/a&gt;(1)&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            v_temp &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; empno &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; v_temp &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; deptno = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     exception&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            when too_many_rows then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   dbms_output.put_line(&#39;太多记录了&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            when others then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   dbms_output.put_line(&#39;error&#39;); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle sql" scheme="https://okcthouder.github.io/tags/Oracle-sql/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(五)</title>
    <link href="https://okcthouder.github.io/2017/07/19/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>https://okcthouder.github.io/2017/07/19/Oracle学习笔记-五/</id>
    <published>2017-07-19T08:19:13.000Z</published>
    <updated>2017-07-23T08:20:59.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PL-SQL-过程化SQL语言"><a href="#PL-SQL-过程化SQL语言" class="headerlink" title="PL_SQL(过程化SQL语言)"></a>PL_SQL(过程化SQL语言)</h1><h3 id="38-在客户端输出helloworld"><a href="#38-在客户端输出helloworld" class="headerlink" title="38. 在客户端输出helloworld"></a>38. 在客户端输出helloworld</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">       <span class="keyword">set</span> serveroutput <span class="keyword">on</span>;//默认是off，设成on是让Oracle可以在客户端输出数据 </div><div class="line"></div><div class="line"><span class="keyword">begin</span></div><div class="line"></div><div class="line">       dbms_output.put_line(<span class="string">'helloworld'</span>);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line">       /</div><div class="line"></div><div class="line"><span class="comment">----------------pl/sql变量的赋值与输出----</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_name varchar2(<span class="number">20</span>);//声明变量v_name变量的声明以v_开头</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              v_name:= <span class="string">'myname'</span>;</div><div class="line"></div><div class="line">              dbms_output.put_line(v_name);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line">       /</div></pre></td></tr></table></figure>
  <a id="more"></a>
<h3 id="39-pl-sql对于异常的处理-除数为0"><a href="#39-pl-sql对于异常的处理-除数为0" class="headerlink" title="39. pl/sql对于异常的处理(除数为0)"></a>39. pl/sql对于异常的处理(除数为0)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> declare</div><div class="line"></div><div class="line">              v_num number := 0;</div><div class="line"></div><div class="line">       begin</div><div class="line"></div><div class="line">              v_num:= 2/v_num;</div><div class="line"></div><div class="line">              dbms_output.put_line(v_num);</div><div class="line"></div><div class="line">**       exception**</div><div class="line"></div><div class="line">**              when others then**</div><div class="line"></div><div class="line">**              dbms_output.put_line('error');**</div><div class="line"></div><div class="line">       end;</div><div class="line"></div><div class="line">       /</div></pre></td></tr></table></figure>
<h3 id="40-变量的声明"><a href="#40-变量的声明" class="headerlink" title="40. 变量的声明"></a>40. 变量的声明</h3><p>​       binary_integer:整数，主要用来计数而不是用来表示字段类型   比number效率高</p>
<p>​       number:数字类型</p>
<p>​       char:定长字符串</p>
<p>​       varchar2：变长字符串</p>
<p>​       date：日期</p>
<p>​       long：字符串，最长2GB</p>
<p>​       boolean：布尔类型，可以取值true，false，null//最好给一初值</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">----------变量的声明，使用 '%type'属性---------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_empno <span class="built_in">number</span>(<span class="number">4</span>);</div><div class="line"></div><div class="line">              v_empno2 emp.empno%type;</div><div class="line"></div><div class="line">              v_empno3 v_empno2%type;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              dbms_output.put_line(<span class="string">'Test'</span>);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line">       /</div><div class="line"></div><div class="line">       <span class="comment">--使用%type属性，可以使变量的声明根据表字段的类型自动变换，省去了维护的麻烦，而且%type属性，可以用于变量身上</span></div></pre></td></tr></table></figure>
<h3 id="41-组合变量"><a href="#41-组合变量" class="headerlink" title="41.组合变量"></a>41.组合变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---------------Table变量类型(相当于java里面的数组)--------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              <span class="keyword">type</span> type_table_emp_empno <span class="keyword">is</span> <span class="keyword">table</span> <span class="keyword">of</span> emp.empno%<span class="keyword">type</span> <span class="keyword">index</span> <span class="keyword">by</span> binary_integer;</div><div class="line"></div><div class="line">                     v_empnostype_table type_table_empno;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              v_empnos(<span class="number">0</span>):= <span class="number">7345</span>;</div><div class="line"></div><div class="line">              v_empnos(-1):=9999;</div><div class="line"></div><div class="line">              dbms_output.put_line(v_empnos(-1));</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h3 id="42-Record变量类型（相当于Java里面的类）"><a href="#42-Record变量类型（相当于Java里面的类）" class="headerlink" title="42. Record变量类型（相当于Java里面的类）"></a>42. Record变量类型（相当于Java里面的类）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">declare</span></div><div class="line"></div><div class="line">              <span class="keyword">type</span> type_record_dept <span class="keyword">is</span> <span class="built_in">record</span></div><div class="line"></div><div class="line">              (</div><div class="line"></div><div class="line">                     deptno dept.deptno%<span class="keyword">type</span>,</div><div class="line"></div><div class="line">                     dname dept.dname%<span class="keyword">type</span>,</div><div class="line"></div><div class="line">                     loc dept.loc%<span class="keyword">type</span></div><div class="line"></div><div class="line">              );</div><div class="line"></div><div class="line">              v_temp type_record_dept;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              v_temp.deptno:=<span class="number">50</span>;</div><div class="line"></div><div class="line">              v_temp.dname:='aaaa';</div><div class="line"></div><div class="line">              v_temp.loc:='bj';</div><div class="line"></div><div class="line">              dbms_output.put_line(v_temp.deptno|| ' ' || v_temp.dname);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">-----------使用 %rowtype声明record变量，直接参照表来声明record-------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_temp dept%rowtype;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              v_temp.deptno:=<span class="number">50</span>;</div><div class="line"></div><div class="line">              v_temp.dname:='aaaa';</div><div class="line"></div><div class="line">              v_temp.loc:='bj';</div><div class="line"></div><div class="line">       dbms_output.put_line(vtemp.deptno || '' || v temp.dname)                 </div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<p>​       </p>
<h3 id="43-select语句的运用-必须保证select语句有相应的返回记录"><a href="#43-select语句的运用-必须保证select语句有相应的返回记录" class="headerlink" title="43. select语句的运用(必须保证select语句有相应的返回记录)"></a>43. select语句的运用(必须保证select语句有相应的返回记录)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_ename emp.ename%<span class="keyword">type</span>;</div><div class="line"></div><div class="line">              v_sal emp.sal%type;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">select</span> ename,sal <span class="keyword">into</span> v_ename,v_sal <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7369</span>;</div><div class="line"></div><div class="line">              dbms_output.put_line(v_ename|| '' || v_sal);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">-------------------------select语句的应用（record）------------------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_emp emp%rowtype;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">select</span> * <span class="keyword">into</span> v_emp <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7369</span>;</div><div class="line"></div><div class="line">              dbms_output_line(v_emp.ename);</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"><span class="comment">------------- insert语句的应用 -----------------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_deptno dept.deptno%<span class="keyword">type</span> := <span class="number">50</span>;</div><div class="line"></div><div class="line">              v_dname dept.dname%type :='aaa';</div><div class="line"></div><div class="line">              v_loc dept.loc%type := 'bj';</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">insert</span> <span class="keyword">into</span> dept2 <span class="keyword">values</span>(v_deptno,v_dname,v_loc);</div><div class="line"></div><div class="line">              <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">       <span class="comment">-------------update 语句的应用------------------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">declare</span></div><div class="line"></div><div class="line">              v_deptno emp2.deptno%<span class="keyword">type</span> := <span class="number">50</span>;</div><div class="line"></div><div class="line">              v_count  number;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">update</span> emp2 <span class="keyword">set</span> sal = sal/<span class="number">2</span> <span class="keyword">where</span> deptno =v_deptno;</div><div class="line"></div><div class="line">              dbms_output.put_line(sql%rowcount || ‘条记录被影响’);</div><div class="line"></div><div class="line">              <span class="keyword">commit</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<p>注：sql%rowcount统计上一条sql语句更新的记录条数</p>
<h3 id="44-ddl语言，数据定义语言"><a href="#44-ddl语言，数据定义语言" class="headerlink" title="44.ddl语言，数据定义语言"></a>44.ddl语言，数据定义语言</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> begin</div><div class="line"></div><div class="line">              execute immediate 'create table T (nnn varchar(30) default ''a'')';</div><div class="line"></div><div class="line">       end;</div><div class="line"></div><div class="line">------------------ifelse语句--------------------------------------</div><div class="line"></div><div class="line">    declare</div><div class="line"></div><div class="line">              v_sal emp.sal%type;</div><div class="line"></div><div class="line">    begin</div><div class="line"></div><div class="line">              select sal into v_sal from emp where empno = 7369;</div><div class="line"></div><div class="line">       if(v_sal&lt; 2000) then</div><div class="line"></div><div class="line">              dbms_output.put_line('low');</div><div class="line"></div><div class="line">       els if(v_sal &gt; 2000) then</div><div class="line"></div><div class="line">              dbms_output.put_line('middle');</div><div class="line"></div><div class="line">       else</div><div class="line"></div><div class="line">              dbms_output.put_line('height');</div><div class="line"></div><div class="line">       end if;</div><div class="line"></div><div class="line">     end;</div></pre></td></tr></table></figure>
<h3 id="45-循环"><a href="#45-循环" class="headerlink" title="45. 循环"></a>45. 循环</h3><h4 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">declare</div><div class="line"></div><div class="line">            i binary_integer := 1;</div><div class="line"></div><div class="line">     begin</div><div class="line"></div><div class="line">            loop</div><div class="line"></div><div class="line">                          dbms_output.put_line(i);</div><div class="line"></div><div class="line">                          i:= i + 1;</div><div class="line"></div><div class="line">                   exit when (i&gt;=11);</div><div class="line"></div><div class="line">            end loop;</div><div class="line"></div><div class="line">     end;</div></pre></td></tr></table></figure>
<h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span></div><div class="line"></div><div class="line">              j binary_integer := <span class="number">1</span>;</div><div class="line"></div><div class="line">       <span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">while</span> j &lt; <span class="number">11</span> <span class="keyword">loop</span></div><div class="line"></div><div class="line">                     dbms_output.put_line(j);</div><div class="line"></div><div class="line">              j:=j+1;</div><div class="line"></div><div class="line">              <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line"></div><div class="line">              <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">loop</span></div><div class="line"></div><div class="line">                     dbms_output.put_line(k);</div><div class="line"></div><div class="line">              <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">              for k in reverse 1..10 loop</div><div class="line"></div><div class="line">                     dbms_output.put_line(k);</div><div class="line"></div><div class="line">              <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"></div><div class="line">       <span class="keyword">end</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PL-SQL-过程化SQL语言&quot;&gt;&lt;a href=&quot;#PL-SQL-过程化SQL语言&quot; class=&quot;headerlink&quot; title=&quot;PL_SQL(过程化SQL语言)&quot;&gt;&lt;/a&gt;PL_SQL(过程化SQL语言)&lt;/h1&gt;&lt;h3 id=&quot;38-在客户端输出helloworld&quot;&gt;&lt;a href=&quot;#38-在客户端输出helloworld&quot; class=&quot;headerlink&quot; title=&quot;38. 在客户端输出helloworld&quot;&gt;&lt;/a&gt;38. 在客户端输出helloworld&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; serveroutput &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;;//默认是off，设成on是让Oracle可以在客户端输出数据 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       dbms_output.put_line(&lt;span class=&quot;string&quot;&gt;&#39;helloworld&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;----------------pl/sql变量的赋值与输出----&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              v_name varchar2(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);//声明变量v_name变量的声明以v_开头&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              v_name:= &lt;span class=&quot;string&quot;&gt;&#39;myname&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              dbms_output.put_line(v_name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       /&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle sql" scheme="https://okcthouder.github.io/tags/Oracle-sql/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(四)</title>
    <link href="https://okcthouder.github.io/2017/07/18/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>https://okcthouder.github.io/2017/07/18/Oracle学习笔记-四/</id>
    <published>2017-07-18T04:00:00.000Z</published>
    <updated>2017-07-23T08:34:39.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="24-——-创建新用户——–"><a href="#24-——-创建新用户——–" class="headerlink" title="24.——-创建新用户——–"></a>24.——-创建新用户——–</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">1、<span class="keyword">backup</span> scott//备份</div><div class="line"></div><div class="line">       <span class="keyword">exp</span>//导出</div><div class="line"></div><div class="line"><span class="number">2</span>、<span class="keyword">create</span> <span class="keyword">user</span></div><div class="line"></div><div class="line">       createuser guohailong <span class="keyword">identified</span>(认证) <span class="keyword">by</span> guohailong  <span class="keyword">default</span> <span class="keyword">table</span> <span class="keyword">space</span> <span class="keyword">users</span> <span class="keyword">quota</span>(配额) <span class="number">10</span>M <span class="keyword">on</span> <span class="keyword">users</span></div><div class="line"></div><div class="line">       <span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span>(给它登录到服务器的权限),<span class="keyword">create</span> <span class="keyword">table</span>, <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">to</span> guohailong</div><div class="line"></div><div class="line"><span class="number">3</span>、<span class="keyword">import</span> <span class="keyword">data</span></div><div class="line"></div><div class="line">       Imp</div></pre></td></tr></table></figure>
  <a id="more"></a>
<h3 id="25-——-取消操作——–"><a href="#25-——-取消操作——–" class="headerlink" title="25. ——-取消操作——–"></a>25. ——-取消操作——–</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">rollback</span></div><div class="line"></div><div class="line"><span class="comment">-----------事务确认语句--------</span></div><div class="line"></div><div class="line">       <span class="keyword">commit</span>;//此时再执行<span class="keyword">rollback</span>无效</div><div class="line"></div><div class="line">当正常断开连接的时候例如<span class="keyword">exit</span>,事务自动提交。  当非正常断开连接，例如直接关闭dos窗口或关机，事务自动提交 </div><div class="line"></div><div class="line"><span class="comment">-----表的备份</span></div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">table</span> dept2 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> dept;</div><div class="line"></div><div class="line"><span class="comment">-----插入数据</span></div><div class="line"></div><div class="line">       <span class="keyword">insert</span> <span class="keyword">into</span> dept2 <span class="keyword">values</span>(<span class="number">50</span>,<span class="string">'game'</span>,<span class="string">'beijing'</span>);</div><div class="line"></div><div class="line">     <span class="comment">----只对某个字段插入数据</span></div><div class="line"></div><div class="line">       <span class="keyword">insert</span> <span class="keyword">into</span> dept2(deptno,dname) <span class="keyword">values</span>(<span class="number">60</span>,<span class="string">'game2'</span>);</div><div class="line"></div><div class="line"><span class="comment">-----将一个表中的数据完全插入另一个表中（表结构必须一样）</span></div><div class="line"></div><div class="line">       <span class="keyword">insert</span> <span class="keyword">into</span> dept2 <span class="keyword">select</span> * <span class="keyword">from</span> dept;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-----求前五名员工的编号和名称（使用伪字段rownum 只能使用 &lt; 或 = 要使用 &gt; 必须使用子查询）</span></div><div class="line"></div><div class="line">       <span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">rownum</span> &lt;= <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">----求10名雇员以后的雇员名称--------</span></div><div class="line"></div><div class="line">       <span class="keyword">select</span> ename <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> r,ename <span class="keyword">from</span> emp) <span class="keyword">where</span> r &gt; <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">----求薪水最高的前5个人的薪水和名字---------</span></div><div class="line"></div><div class="line">       <span class="keyword">select</span> ename, sal <span class="keyword">from</span> (<span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">5</span>;      </div><div class="line"></div><div class="line"><span class="comment">----求按薪水倒序排列后的第6名到第10名的员工的名字和薪水--------</span></div><div class="line"></div><div class="line">       selectename, sal from</div><div class="line"></div><div class="line">          (<span class="keyword">select</span> ename, sal, <span class="keyword">rownum</span> r <span class="keyword">from</span></div><div class="line"></div><div class="line">              (<span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp orderby sal <span class="keyword">desc</span>)</div><div class="line"></div><div class="line">          )</div><div class="line"></div><div class="line">       <span class="keyword">where</span> r&gt;=<span class="number">6</span> <span class="keyword">and</span> r&lt;=<span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="26-——-面试题——–"><a href="#26-——-面试题——–" class="headerlink" title="26. ——-面试题——–"></a>26. ——-面试题——–</h3><p>​      有3个表S，C，SC</p>
<p>​       S（SNO，SNAME）代表（学号，姓名） </p>
<p>​       C（CNO，CNAME，CTEACHER）代表（课号，课名，教师） </p>
<p>​       SC（SNO，CNO，SCGRADE）代表（学号，课号成绩） </p>
<p>​       问题： </p>
<p>​       1，找出没选过“黎明”老师的所有学生姓名。 </p>
<p>​       2，列出2门以上（含2门）不及格学生姓名及平均成绩。 </p>
<p>​       3，即学过1号课程有学过2号课所有学生的姓名。</p>
<p>​       答案：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1、</div><div class="line"></div><div class="line">    <span class="keyword">select</span> sname <span class="keyword">from</span> s <span class="keyword">join</span> sc <span class="keyword">on</span>(s.sno =sc.sno) <span class="keyword">join</span> c <span class="keyword">on</span> (sc.cno = c.cno) <span class="keyword">where</span> cteacher &lt;&gt; <span class="string">'黎明'</span>;</div><div class="line"></div><div class="line">2、</div><div class="line">    <span class="keyword">select</span> sname <span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> scgrade &lt; <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;=<span class="number">2</span>);</div><div class="line"></div><div class="line">3、</div><div class="line">    <span class="keyword">select</span> sname <span class="keyword">from</span> s <span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> sno, <span class="keyword">from</span> sc <span class="keyword">where</span> cno=<span class="number">1</span> <span class="keyword">and</span> cno <span class="keyword">in</span></div><div class="line"></div><div class="line">                                          (<span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> cno = <span class="number">2</span>);</div><div class="line">                                 )</div></pre></td></tr></table></figure>
<h3 id="27-——–创建表———–"><a href="#27-——–创建表———–" class="headerlink" title="27. ——–创建表———–"></a>27. ——–创建表———–</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">(</div><div class="line"></div><div class="line"><span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line"><span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mmnot <span class="literal">null</span>,</div><div class="line"></div><div class="line">sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>),</div><div class="line"></div><div class="line">email varchar2(<span class="number">50</span>) <span class="keyword">unique</span></div><div class="line"></div><div class="line"> );</div></pre></td></tr></table></figure>
<h3 id="28-五种约束条件：非空约束、唯一约束、主键约束、外键约束、检查约束（check）"><a href="#28-五种约束条件：非空约束、唯一约束、主键约束、外键约束、检查约束（check）" class="headerlink" title="28. 五种约束条件：非空约束、唯一约束、主键约束、外键约束、检查约束（check）"></a>28. 五种约束条件：非空约束、唯一约束、主键约束、外键约束、检查约束（check）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--------------给name字段加入 非空 **约束**，并给约束一个名字，若不取，系统默认取一个-------------</span></div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">      (</div><div class="line"></div><div class="line">      <span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line">      <span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mm <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line"></div><div class="line">      sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">      age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">      sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">      grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line">      <span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>),</div><div class="line"></div><div class="line">      email varchar2(<span class="number">50</span>)</div><div class="line"></div><div class="line">       );</div><div class="line"></div><div class="line"><span class="comment">--------------给nameemail字段加上唯一约束两个 null值 不为重复-------------</span></div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">      (</div><div class="line"></div><div class="line">      <span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line">      <span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mmnot <span class="literal">null</span>,</div><div class="line"></div><div class="line">      sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">      age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">      sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">      grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line">      <span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>),</div><div class="line"></div><div class="line">      email varchar2(<span class="number">50</span>) <span class="keyword">unique</span></div><div class="line"></div><div class="line">       );</div><div class="line"></div><div class="line"><span class="comment">--------------两个字段的组合不能重复 约束：表级约束-------------</span></div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">      (</div><div class="line"></div><div class="line">      <span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line">      <span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mmnot <span class="literal">null</span>,</div><div class="line"></div><div class="line">      sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">      age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">      sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">      grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line">      <span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>),</div><div class="line"></div><div class="line">      email varchar2(<span class="number">50</span>)，</div><div class="line"></div><div class="line">       <span class="keyword">constraint</span> stu_name_email_uni <span class="keyword">unique</span>(email,<span class="keyword">name</span>)</div><div class="line"></div><div class="line">       );</div></pre></td></tr></table></figure>
<h3 id="29-——-主键约束——–"><a href="#29-——-主键约束——–" class="headerlink" title="29. ——-主键约束——–"></a>29. ——-主键约束——–</h3><p>​     </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">     (</div><div class="line"></div><div class="line">     <span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line">     <span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mmnot <span class="literal">null</span>,</div><div class="line"></div><div class="line">     sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">     age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">     sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">     grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line">     <span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>),</div><div class="line"></div><div class="line">     email varchar2(<span class="number">50</span>),</div><div class="line"></div><div class="line">      <span class="keyword">constraint</span> stu_id_pk primary <span class="keyword">key</span> (<span class="keyword">id</span>),</div><div class="line"></div><div class="line">      constraintstu_name_email_uni <span class="keyword">unique</span>(email, <span class="keyword">name</span>)</div><div class="line"></div><div class="line">      );</div></pre></td></tr></table></figure>
<h3 id="30-—外键约束-被参考字段必须是主键—"><a href="#30-—外键约束-被参考字段必须是主键—" class="headerlink" title="30.—外键约束  被参考字段必须是主键—"></a>30.—外键约束  被参考字段必须是主键—</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line"></div><div class="line">(</div><div class="line"></div><div class="line"><span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>),</div><div class="line"></div><div class="line"><span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_mmnot <span class="literal">null</span>,</div><div class="line"></div><div class="line">sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line"></div><div class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line"></div><div class="line">sdate <span class="built_in">date</span>,</div><div class="line"></div><div class="line">grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>),</div><div class="line"></div><div class="line">email varchar2(<span class="number">50</span>),</div><div class="line"></div><div class="line"> <span class="keyword">constraint</span> stu_class_fk foreign <span class="keyword">key</span> (<span class="keyword">class</span>) <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>),</div><div class="line"></div><div class="line"> <span class="keyword">constraint</span> stu_id_pk primary <span class="keyword">key</span> (<span class="keyword">id</span>),</div><div class="line"></div><div class="line"> <span class="keyword">constraint</span> stu_name_email_uni <span class="keyword">unique</span>(email, <span class="keyword">name</span>)</div><div class="line"></div><div class="line"> );</div><div class="line"></div><div class="line"> 红色为字段约束的写法，蓝色为表级约束的写法</div><div class="line"></div><div class="line"> createtable class </div><div class="line"></div><div class="line"> (</div><div class="line"></div><div class="line"> idnumber(4) primary key,</div><div class="line"></div><div class="line"> namevarchar2(20) not null</div><div class="line"></div><div class="line"> );</div></pre></td></tr></table></figure>
<h3 id="31-修改表结构"><a href="#31-修改表结构" class="headerlink" title="31. 修改表结构"></a>31. 修改表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---------------添加字段--------------------------</span></div><div class="line"></div><div class="line">       altertable stu add(addr varchar2(29));</div><div class="line"></div><div class="line"><span class="comment">---------------删除字段--------------------------</span></div><div class="line"></div><div class="line">       altertable stu <span class="keyword">drop</span> (addr);</div><div class="line"></div><div class="line"><span class="comment">---------------修改表字段的长度------------------</span></div><div class="line"></div><div class="line">       altertable  stu modify (addr varchar2(50));//更改后的长度必须要能容纳原先的数据</div><div class="line"></div><div class="line"><span class="comment">----------------删除约束条件----------------</span></div><div class="line"></div><div class="line">       altertable stu <span class="keyword">drop</span> <span class="keyword">constraint</span>  约束名</div><div class="line"></div><div class="line"><span class="comment">-----------修改表结构添加约束条件---------------</span></div><div class="line"></div><div class="line">       altertable stu <span class="keyword">add</span> <span class="keyword">constraint</span> stu_class_fk foreign <span class="keyword">key</span> (<span class="keyword">class</span>) <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>);</div></pre></td></tr></table></figure>
<h3 id="32-数据字典表（有user-tables、user-views、user-constraints等等）"><a href="#32-数据字典表（有user-tables、user-views、user-constraints等等）" class="headerlink" title="32. 数据字典表（有user_tables、user_views、user_constraints等等）"></a>32. 数据字典表（有user_tables、user_views、user_constraints等等）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---------------查看当前用户下面所有的表、视图、约束-----数据字典表user_tables---</span></div><div class="line"></div><div class="line">       <span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables;</div><div class="line"></div><div class="line">       <span class="keyword">select</span> view_name <span class="keyword">from</span> user_views;</div><div class="line"></div><div class="line">       <span class="keyword">select</span> constraint_name <span class="keyword">from</span> user_constraints;</div><div class="line"></div><div class="line"> </div><div class="line">       存储数据字典表的信息的表：dictionary;</div><div class="line"></div><div class="line">        //该表共有两个字段 table_name comments</div><div class="line"></div><div class="line">        //table_name主要存放数据字典表的名字</div><div class="line"></div><div class="line">        //comments主要是对这张数据字典表的描述</div></pre></td></tr></table></figure>
<p>​        </p>
<h3 id="33-索引-能优化查询效率"><a href="#33-索引-能优化查询效率" class="headerlink" title="33. 索引(能优化查询效率)"></a>33. 索引(能优化查询效率)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_stu_email <span class="keyword">on</span> stu (email);// 在stu这张表的email字段上建立一个索引：idx_stu_email</div><div class="line"></div><div class="line"><span class="comment">---------- 删除索引 ------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">drop</span> <span class="keyword">index</span> index_stu_email;</div><div class="line"></div><div class="line"><span class="comment">---------查看所有的索引----------------</span></div><div class="line"></div><div class="line">       <span class="keyword">select</span> index_name <span class="keyword">from</span> user_indexes;</div><div class="line"></div><div class="line"><span class="comment">---------创建视图-------------------</span></div><div class="line"></div><div class="line">       <span class="keyword">create</span> <span class="keyword">view</span> v$stu <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> stu;</div></pre></td></tr></table></figure>
<p>​       视图的作用: 简化查询，保护我们的一些隐私数据，通过视图也可以用来更新数据，但是我们一般不这么用 </p>
<p>缺点：要对视图进行维护</p>
<h3 id="34-创建序列（sequence，oracle特有的东西，一般用来做主键）"><a href="#34-创建序列（sequence，oracle特有的东西，一般用来做主键）" class="headerlink" title="34.创建序列（sequence，oracle特有的东西，一般用来做主键）"></a>34.创建序列（sequence，oracle特有的东西，一般用来做主键）</h3><p>​      </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> seq;//创建序列</div><div class="line"></div><div class="line">      <span class="keyword">select</span> seq.nextval <span class="keyword">from</span> dual;// 查看seq序列的下一个值</div><div class="line"></div><div class="line">      <span class="keyword">drop</span> <span class="keyword">sequence</span> seq;//删除序列</div><div class="line"></div><div class="line">      </div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">table</span> article ( <span class="keyword">id</span> <span class="built_in">number</span>, title varchar2(<span class="number">1024</span>),cont <span class="keyword">long</span>);</div><div class="line"></div><div class="line">      <span class="keyword">create</span> <span class="keyword">sequence</span> seq;</div><div class="line"></div><div class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> article (<span class="keyword">id</span>,title,cont) <span class="keyword">values</span>(seq.nextval , ‘a’, ‘b’);</div></pre></td></tr></table></figure>
<h3 id="35-数据库的三范式"><a href="#35-数据库的三范式" class="headerlink" title="35. 数据库的三范式"></a>35. 数据库的三范式</h3><p>​       （1）要有主键<strong>，</strong>列不可分</p>
<p>​       （2）<strong>不能存在部分依赖</strong>：当有多个字段联合起来作为主键的时候，不是主键的字段不能部分依赖于主键中的某个字段</p>
<p>​       （3）不能存在传递依赖</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;24-——-创建新用户——–&quot;&gt;&lt;a href=&quot;#24-——-创建新用户——–&quot; class=&quot;headerlink&quot; title=&quot;24.——-创建新用户——–&quot;&gt;&lt;/a&gt;24.——-创建新用户——–&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1、&lt;span class=&quot;keyword&quot;&gt;backup&lt;/span&gt; scott//备份&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;exp&lt;/span&gt;//导出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       createuser guohailong &lt;span class=&quot;keyword&quot;&gt;identified&lt;/span&gt;(认证) &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; guohailong  &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;quota&lt;/span&gt;(配额) &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;M &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;session&lt;/span&gt;(给它登录到服务器的权限),&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; guohailong&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Imp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle sql" scheme="https://okcthouder.github.io/tags/Oracle-sql/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(三)</title>
    <link href="https://okcthouder.github.io/2017/07/18/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>https://okcthouder.github.io/2017/07/18/Oracle学习笔记-三/</id>
    <published>2017-07-18T03:59:00.000Z</published>
    <updated>2017-07-23T08:37:37.568Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-SQL1999-table-connections"><a href="#12-SQL1999-table-connections" class="headerlink" title="12. SQL1999_table_connections"></a>12. SQL1999_table_connections</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, dname,grade <span class="keyword">from</span> emp e,deptd, salgrade s</div><div class="line"><span class="keyword">where</span> e.deptno = d.deptno <span class="keyword">and</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal <span class="keyword">and</span> </div><div class="line">job &lt;&gt; <span class="string">'CLERK'</span></div></pre></td></tr></table></figure>
<p>​           有没有办法把过滤条件和连接条件分开来? 出于这样考虑,Sql1999标准推出来了.有许多人用的还是</p>
<p>旧的语法,所以得看懂这种语句.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp,dept;(旧标准).</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp** <span class="keyword">cross</span> <span class="keyword">join</span>** dept;(1999标准)</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno=dept.deptno (旧)</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">on</span>(emp.deptno = dept.deptno); 1999标准.没有Where语句.</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">using</span>(deptno);等同上句,但不推荐使用.</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename,grade <span class="keyword">from</span> emp e <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal);</div></pre></td></tr></table></figure>
<p>​    </p>
   <a id="more"></a>
<p>  join 连接语句, on过滤条件。连接，条件一眼分开。如果用Where语句较长时，连接语句和过滤语句混在一起。<br>​      三张表连接：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">slect ename, dname, grade from</div><div class="line"></div><div class="line">emp e join dept d on(e.deptno=d.deptno)</div><div class="line"></div><div class="line">join salgrade s on(e.sal between s.losal and s.hisal)</div><div class="line"></div><div class="line">where ename not like '_A%';</div></pre></td></tr></table></figure>
<p>​      把每张表连接 条件不混在一起，然后数据过滤条件全部区分开来。读起来更清晰，更容易懂一点。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">select</span> e1.ename,e2.ename <span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2</div><div class="line"></div><div class="line"><span class="keyword">on</span>(e1.mgr = e2.emptno);</div></pre></td></tr></table></figure>
<p>​      左外连接：会把左边这张表多余数据显示出来。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">select</span> e1.ename,e2.ename <span class="keyword">from</span> emp e1 <span class="keyword">left</span> <span class="keyword">join</span></div><div class="line"></div><div class="line">emp e2 <span class="keyword">on</span>(e1.mgr =e2.empno);left 后可加outer</div></pre></td></tr></table></figure>
<p>​      右外连接：把右边这张表多余数据显示出来。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d</div><div class="line"></div><div class="line"><span class="keyword">on</span>(e.deptno =d.deptno); outer可以取掉。</div></pre></td></tr></table></figure>
<p>​      全外连接： 即把左边多余数据，也把右边多余数据拿出来， </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">select</span> ename,dname <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d</div><div class="line"></div><div class="line"><span class="keyword">on</span>(e.deptno =d.deptno);</div></pre></td></tr></table></figure>
<p>PS：所谓的“外”连接，即把多余的数据显示出来。Outer关键字可以省略。</p>
<h3 id="13-求部门中哪些人的薪水最高"><a href="#13-求部门中哪些人的薪水最高" class="headerlink" title="13. 求部门中哪些人的薪水最高"></a>13. 求部门中哪些人的薪水最高</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">max</span>(sal) max_sal, deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</div><div class="line"><span class="keyword">on</span> (emp.sal = t.max_sal <span class="keyword">and</span> emp.deptno = t.deptno)</div></pre></td></tr></table></figure>
<h3 id="14-求部门平均薪水的等级"><a href="#14-求部门平均薪水的等级" class="headerlink" title="14. 求部门平均薪水的等级"></a>14. 求部门平均薪水的等级</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno,avg_sal,grade <span class="keyword">from</span></div><div class="line">       (<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)t</div><div class="line">       <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div></pre></td></tr></table></figure>
<h3 id="15-求部门平均的薪水的平均等级"><a href="#15-求部门平均的薪水的平均等级" class="headerlink" title="15. 求部门平均的薪水的平均等级"></a>15. 求部门平均的薪水的平均等级</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno,<span class="keyword">avg</span>(grade) <span class="keyword">from</span> </div><div class="line">(<span class="keyword">select</span> deptno,ename, grade <span class="keyword">from</span> emp <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(emp.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)) t</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</div></pre></td></tr></table></figure>
<h3 id="16-哪些人是经理"><a href="#16-哪些人是经理" class="headerlink" title="16. 哪些人是经理"></a>16. 哪些人是经理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">in</span>(<span class="keyword">select</span> mgr <span class="keyword">from</span> emp);</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">distinct</span> mgr <span class="keyword">from</span> emp);</div></pre></td></tr></table></figure>
<h3 id="17-不准用组函数，求薪水的最高值（面试题）"><a href="#17-不准用组函数，求薪水的最高值（面试题）" class="headerlink" title="17.不准用组函数，求薪水的最高值（面试题）"></a>17.不准用组函数，求薪水的最高值（面试题）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">not</span> <span class="keyword">in</span>(</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> e1.sal <span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2 <span class="keyword">on</span> (e1.sal&lt;e2.sal));</div></pre></td></tr></table></figure>
<h3 id="18-平均薪水最高的部门编号"><a href="#18-平均薪水最高的部门编号" class="headerlink" title="18.平均薪水最高的部门编号"></a>18.平均薪水最高的部门编号</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno,avg_sal <span class="keyword">from</span></div><div class="line">(<span class="keyword">select</span> <span class="keyword">avg</span>(sal)avg_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line"><span class="keyword">where</span> avg_sal=</div><div class="line">(<span class="keyword">select</span> <span class="keyword">max</span>(avg_sal)<span class="keyword">from</span> </div><div class="line">(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) avg_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="19-平均薪水最高的部门名称"><a href="#19-平均薪水最高的部门名称" class="headerlink" title="19.平均薪水最高的部门名称"></a>19.平均薪水最高的部门名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> deptno=</div><div class="line">( </div><div class="line">  <span class="keyword">select</span> deptno <span class="keyword">from</span></div><div class="line">  (<span class="keyword">select</span> <span class="keyword">avg</span>(sal)avg_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line">  <span class="keyword">where</span> avg_sal=</div><div class="line">  (<span class="keyword">select</span> <span class="keyword">max</span>(avg_sal)<span class="keyword">from</span> </div><div class="line">  (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) avg_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line">  )</div><div class="line"> )</div></pre></td></tr></table></figure>
<h3 id="20-求平均薪水的等级最低的部门的部门名称"><a href="#20-求平均薪水的等级最低的部门的部门名称" class="headerlink" title="20.求平均薪水的等级最低的部门的部门名称"></a>20.求平均薪水的等级最低的部门的部门名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">--组函数嵌套</span></div><div class="line">  <span class="comment">--如：平均薪水最高的部门编号，可以E.更简单的方法如下：</span></div><div class="line">  <span class="keyword">select</span> deptno,avg_sal <span class="keyword">from</span> </div><div class="line">  (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) avg_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line">  <span class="keyword">where</span> avg_sal =</div><div class="line">  (<span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">avg</span>(sal)) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)</div><div class="line">      组函数最多嵌套两层</div><div class="line">      </div><div class="line">     <span class="comment">-- 分析：</span></div><div class="line">     <span class="comment">-- 首先求</span></div><div class="line">     <span class="comment">--1.平均薪水： </span></div><div class="line">	<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</div><div class="line">     <span class="comment">-- 2.平均薪水等级：  把平均薪水当做一张表，需要和另外一张表连接salgrade</span></div><div class="line">      <span class="keyword">select</span>  deptno,grade,avg_sal <span class="keyword">from</span> </div><div class="line">        ( <span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</div><div class="line">      <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">      </div><div class="line"> <span class="comment">--  上面结果又可当成一张表。</span></div><div class="line">      </div><div class="line"> <span class="comment">--   DEPTNO    GRADE    AVG_SAL</span></div><div class="line">    <span class="comment">--------  -------  ----------</span></div><div class="line"> <span class="comment">--   30           3   1566.66667</span></div><div class="line"> <span class="comment">--   20           4   2175</span></div><div class="line"> <span class="comment">--   10           4   2916.66667</span></div><div class="line"></div><div class="line"> <span class="comment">--   3.求上表平均等级最低值</span></div><div class="line">      </div><div class="line">      <span class="keyword">select</span> <span class="keyword">min</span>(grade) <span class="keyword">from</span></div><div class="line">      (</div><div class="line">        <span class="keyword">select</span> deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">         (<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)t</div><div class="line">        <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisa)</div><div class="line">       )</div><div class="line"></div><div class="line"> <span class="comment">--   4.把最低值对应的2结果的那张表的对应那张表的deptno, 然后把2对应的表和另外一张表做连接。</span></div><div class="line">        </div><div class="line">        <span class="keyword">select</span> dname ,deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">          (</div><div class="line">	      <span class="keyword">select</span> deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">            (<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)t</div><div class="line">           <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">           ) t1</div><div class="line">          <span class="keyword">join</span> dept <span class="keyword">on</span> (t1.deptno = dept.deptno)</div><div class="line">          <span class="keyword">where</span> t1.grade =</div><div class="line">          ( </div><div class="line">            <span class="keyword">select</span> deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">             (<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</div><div class="line">              <span class="keyword">join</span> salgrade s <span class="keyword">on</span>(t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">             )</div><div class="line">          )</div><div class="line"><span class="comment">--       结果如下：</span></div><div class="line">       </div><div class="line"><span class="comment">--      DNAME    DEPTNO     GRADE    AVG_SAL</span></div><div class="line"><span class="comment">--    --------  -------  --------   --------</span></div><div class="line"><span class="comment">--      SALES        30        3    1566.6667</span></div></pre></td></tr></table></figure>
<h3 id="21-视图（视图就是一张表，一个字查询）"><a href="#21-视图（视图就是一张表，一个字查询）" class="headerlink" title="21. 视图（视图就是一张表，一个字查询）"></a>21. 视图（视图就是一张表，一个字查询）</h3><p>【</p>
<p>​       默认scott账户没有创建视图的权限，可通过如下语句授权：<br>​       首先登陆超级管理员：conn sys/用户密码 as sysdba;<br>​       授权：grant create table,create view to scott;<br>​       再以scott账户登陆：conn scott/tiger</p>
<p>】 </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 20中语句有重复，可以用视图来简化。</span></div><div class="line">   conn sys/bjsxt as sysdba;</div><div class="line">   <span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span>,<span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">to</span> scott;</div><div class="line">   conn scott/tiger</div><div class="line"><span class="comment">-- 创建视图：</span></div><div class="line">   <span class="keyword">create</span> <span class="keyword">view</span> v$_dept_avg-sal_info <span class="keyword">as</span></div><div class="line">   <span class="keyword">select</span> deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">    ( <span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno)t</div><div class="line">   <span class="keyword">join</span> salgrade s <span class="keyword">on</span> <span class="number">9</span>t.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">  </div><div class="line"><span class="comment">-- 然后 </span></div><div class="line">   <span class="keyword">select</span> * <span class="keyword">from</span> v$_dept_avg-sal_info</div><div class="line">   </div><div class="line"><span class="comment">-- 结果如下：</span></div><div class="line"><span class="comment">--   DEPTNO      GRADE    AVG_SAL</span></div><div class="line"><span class="comment">--  --------  -------  ----------</span></div><div class="line"><span class="comment">--    30           3   1566.66667</span></div><div class="line"><span class="comment">--    20           4   2175</span></div><div class="line"><span class="comment">--    10           4   2916.66667</span></div><div class="line"></div><div class="line"><span class="comment">-- 然后G中查询可以简化成：</span></div><div class="line">   <span class="keyword">select</span>  dname,t1.deptno,grade,avg_sal <span class="keyword">from</span></div><div class="line">   v$_dept_avg-sal_info t1</div><div class="line">   <span class="keyword">join</span> dept <span class="keyword">on</span> t1.deptno =dept.deptno)</div><div class="line">   <span class="keyword">where</span> t1.grade=</div><div class="line">   (</div><div class="line">	<span class="keyword">select</span> <span class="keyword">min</span>(grade) <span class="keyword">from</span> v$_dept_avg-sal_info t1</div><div class="line">   )</div></pre></td></tr></table></figure>
<h3 id="22-求比普通员工最高薪水还要高的经理人的名称"><a href="#22-求比普通员工最高薪水还要高的经理人的名称" class="headerlink" title="22. 求比普通员工最高薪水还要高的经理人的名称"></a>22. 求比普通员工最高薪水还要高的经理人的名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">in</span></div><div class="line">       (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</div><div class="line">    <span class="keyword">and</span> sal &gt;</div><div class="line">    (</div><div class="line">       <span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span></div><div class="line">         (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</div><div class="line">	)</div></pre></td></tr></table></figure>
<h3 id="23-面试题：比较效率"><a href="#23-面试题：比较效率" class="headerlink" title="23. 面试题：比较效率"></a>23. 面试题：比较效率</h3><pre><code>理论上前一句效率高，但实际上可能Oracle可能会自动对代码优化，所以不见得后一句就会慢。
</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">and</span> ename <span class="keyword">like</span> <span class="string">'%A%'</span>;    <span class="comment">--效率高，因为将过滤力度大的放在前面</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%A% and deptno = 10;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12-SQL1999-table-connections&quot;&gt;&lt;a href=&quot;#12-SQL1999-table-connections&quot; class=&quot;headerlink&quot; title=&quot;12. SQL1999_table_connections&quot;&gt;&lt;/a&gt;12. SQL1999_table_connections&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename, dname,grade &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp e,deptd, salgrade s&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; e.deptno = d.deptno &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; e.sal &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; s.losal &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s.hisal &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;job &amp;lt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;CLERK&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​           有没有办法把过滤条件和连接条件分开来? 出于这样考虑,Sql1999标准推出来了.有许多人用的还是&lt;/p&gt;
&lt;p&gt;旧的语法,所以得看懂这种语句.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,dname &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp,dept;(旧标准).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,dname &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp** &lt;span class=&quot;keyword&quot;&gt;cross&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt;** dept;(1999标准)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,dname &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp,dept &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; emp.deptno=dept.deptno (旧)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,dname &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; dept &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;(emp.deptno = dept.deptno); 1999标准.没有Where语句.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,dname &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; dept &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;(deptno);等同上句,但不推荐使用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,grade &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp e &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; salgrade s &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;(e.sal &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; s.losal &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s.hisal);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    &lt;/p&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle sql" scheme="https://okcthouder.github.io/tags/Oracle-sql/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(二)</title>
    <link href="https://okcthouder.github.io/2017/07/17/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>https://okcthouder.github.io/2017/07/17/Oracle学习笔记-二/</id>
    <published>2017-07-17T08:30:18.000Z</published>
    <updated>2017-07-25T11:15:54.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-Group-by语句"><a href="#8-Group-by语句" class="headerlink" title="8. Group by语句"></a>8. Group by语句</h3><p>//需求:现在想求每个部门的平均薪水.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</div><div class="line"> <span class="keyword">select</span> deptno <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</div><div class="line"> </div><div class="line"> <span class="keyword">select</span> deptno,job,<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno,job;</div><div class="line"> </div><div class="line">求薪水值最高的人的名字.</div><div class="line"><span class="keyword">select</span> ename,<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp;出错,因为max只有一个值,但等于max值的人可能好几个,不能匹配.</div><div class="line">应如下求:</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal=(<span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp);</div><div class="line"></div><div class="line">Group by语句应注意,</div><div class="line"></div><div class="line">出现在<span class="keyword">select</span>中的字段,如果没出现在组函数中,必须出现在<span class="keyword">Group</span> <span class="keyword">by</span>语句中.</div></pre></td></tr></table></figure>
  <a id="more"></a>
<h3 id="9-Having-对分组结果筛选"><a href="#9-Having-对分组结果筛选" class="headerlink" title="9. Having 对分组结果筛选"></a>9. Having 对分组结果筛选</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Where是对单条纪录进行筛选,Having是对分组结果进行筛选.</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(sal),deptno <span class="keyword">from</span> emp </div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno </div><div class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(sal)&gt;<span class="number">2000</span>;</div><div class="line"></div><div class="line">查询工资大于1200雇员,按部门编号进行分组,分组后平均薪水大于1500,按工薪倒充排列.</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> sal&gt;<span class="number">1200</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</div><div class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(sal)&gt;<span class="number">1500</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(sal) <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<h3 id="10-字查询"><a href="#10-字查询" class="headerlink" title="10. 字查询"></a>10. 字查询</h3><p>​    谁挣的钱最多(谁:这个人的名字,  钱最多)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> 语句中嵌套<span class="keyword">select</span> 语句,可以在<span class="keyword">where</span>,<span class="keyword">from</span>后.</div></pre></td></tr></table></figure>
<p>​        问哪些人工资,在平均工资之上.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//查找每个部门挣钱最多的那个人的名字.</div><div class="line"><span class="keyword">select</span> ename ,deptno <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> ename <span class="keyword">group</span> <span class="keyword">by</span> deptno) //查询会多值.</div><div class="line"></div><div class="line">//应该如下:</div><div class="line"></div><div class="line"><span class="keyword">select</span>  <span class="keyword">max</span>(sal),deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;//当成一个表.语句如下:</div><div class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">join</span>(<span class="keyword">select</span>  <span class="keyword">max</span>(sal) max_sal,deptno <span class="keyword">from</span> emp <span class="keyword">group</span></div><div class="line"><span class="keyword">by</span> deptno) t <span class="keyword">on</span>(emp.sal=t.max_sal <span class="keyword">and</span> emp.deptno=t.deptno); </div><div class="line"></div><div class="line">//每个部门的平均薪水的等级. </div><div class="line">//分析:首先求平均薪水(当成表),把平均薪水和另外一张表连接.</div></pre></td></tr></table></figure>
<h3 id="11-self-table-connection"><a href="#11-self-table-connection" class="headerlink" title="11. self_table_connection"></a>11. self_table_connection</h3><p>把某个人的名字以及他的经理人的名字求出来(经理人及这个人在表中同处一行)</p>
<p>分析:首先求出这个人的名字,取他的编号,然后从另一张表与其相对应编号,然后找到经理的名字.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> e1.ename ,e2.ename <span class="keyword">from</span> emp e1,emp e2 <span class="keyword">where</span> e1.mgr= e2.empno.</div></pre></td></tr></table></figure>
<p>//empno编号和MGR都是编号.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;8-Group-by语句&quot;&gt;&lt;a href=&quot;#8-Group-by语句&quot; class=&quot;headerlink&quot; title=&quot;8. Group by语句&quot;&gt;&lt;/a&gt;8. Group by语句&lt;/h3&gt;&lt;p&gt;//需求:现在想求每个部门的平均薪水.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;avg&lt;/span&gt;(sal) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; deptno;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; deptno &lt;span class=&quot;keyword&quot;&gt;avg&lt;/span&gt;(sal) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; deptno;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; deptno,job,&lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt;(sal) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; deptno,job;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;求薪水值最高的人的名字.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,&lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt;(sal) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp;出错,因为max只有一个值,但等于max值的人可能好几个,不能匹配.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;应如下求:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; sal=(&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt;(sal) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Group by语句应注意,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;出现在&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;中的字段,如果没出现在组函数中,必须出现在&lt;span class=&quot;keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt;语句中.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="https://okcthouder.github.io/tags/Oracle/"/>
    
      <category term="sql" scheme="https://okcthouder.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Oracle学习笔记(一)</title>
    <link href="https://okcthouder.github.io/2017/07/16/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>https://okcthouder.github.io/2017/07/16/Oracle学习笔记-一/</id>
    <published>2017-07-16T08:38:47.000Z</published>
    <updated>2017-07-23T08:40:32.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlplus sys/所设定的密码 as sysdba(用管理员登陆)</div><div class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott <span class="keyword">account</span> <span class="keyword">unlock</span>;(解锁scott账户)</div></pre></td></tr></table></figure>
<h3 id="1-table-structure"><a href="#1-table-structure" class="headerlink" title="1. table structure"></a>1. table structure</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">描述某一张表：desc 表名</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</div></pre></td></tr></table></figure>
<h3 id="2-select-语句"><a href="#2-select-语句" class="headerlink" title="2. select 语句"></a>2. select 语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">计算数据可以用空表：比如：<span class="keyword">select</span> <span class="number">2</span>*<span class="number">3</span> <span class="keyword">from</span> dual</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,sal*<span class="number">12</span> annual_sal <span class="keyword">from</span> emp;与<span class="keyword">select</span> ename,sal*<span class="number">12</span> <span class="string">"annual sal"</span> <span class="keyword">from</span> emp;区别，加双引号保持原大小写。不加全变大写。</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename || <span class="string">"abcd"</span> 如果连接字符串中含有单引号，用两个单引号代替一个单引号。(||代表连接符)</div></pre></td></tr></table></figure>
 <a id="more"></a>
<h3 id="3-distinct"><a href="#3-distinct" class="headerlink" title="3. distinct"></a>3. distinct</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp;</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno ,job <span class="keyword">from</span> emp</div><div class="line">去掉deptno,job两者组合的重复。更多的项，就是这么多项的组合的不重复组合。</div></pre></td></tr></table></figure>
<h3 id="4-where"><a href="#4-where" class="headerlink" title="4. where"></a>4. where</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno =<span class="number">10</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno &lt;&gt;<span class="number">10</span>;不等于10        </div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename =<span class="string">'bike'</span>;</div><div class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">800</span> <span class="keyword">and</span> <span class="number">1500</span> (&gt;=<span class="number">800</span> <span class="keyword">and</span> &lt;=<span class="number">1500</span>)空值处理:</div><div class="line"><span class="keyword">select</span> ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> (<span class="keyword">not</span>) <span class="literal">null</span>;</div><div class="line"><span class="keyword">select</span> ename,sal,comm <span class="keyword">from</span> emp <span class="keyword">where</span> ename ( <span class="keyword">not</span>)<span class="keyword">in</span> (<span class="string">'smith'</span>,<span class="string">'king'</span>,<span class="string">'abc'</span>);</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'_A%'</span>;_代表一个字母,%代表0个或多个字母. 如果查询%</div><div class="line">可用转义字符.\%. 还可以用escape '$'比如:<span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%$a%'</span> escape <span class="string">'$'</span>;</div></pre></td></tr></table></figure>
<h3 id="5-orderby"><a href="#5-orderby" class="headerlink" title="5. orderby"></a>5. orderby</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept; </div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">order</span> <span class="keyword">by</span> dept <span class="keyword">desc</span>;(默认:asc)</div><div class="line"><span class="keyword">select</span> ename,sal,deptno <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">asc</span>,ename <span class="keyword">desc</span>;</div></pre></td></tr></table></figure>
<h3 id="6-sql-function1"><a href="#6-sql-function1" class="headerlink" title="6. sql function1"></a>6. sql function1</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename,sal*<span class="number">12</span> annual_sal <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> ename <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'_A%'</span> <span class="keyword">and</span> sal&gt;<span class="number">800</span></div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(ename) <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp </div><div class="line"><span class="keyword">where</span> <span class="keyword">lower</span>(ename) <span class="keyword">like</span> <span class="string">'_a%'</span>;等同于</div><div class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'_a%'</span> <span class="keyword">or</span> ename <span class="keyword">like</span> <span class="string">'_A%'</span>;</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(ename,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> emp;从第二字符截,一共截三个字符.</div><div class="line"><span class="keyword">select</span> <span class="keyword">chr</span>(<span class="number">65</span>) <span class="keyword">from</span> dual 结果为:A</div><div class="line"><span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="string">'a'</span>) <span class="keyword">from</span> dual 结果为:<span class="number">65</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">23.652</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; 结果为: 23.7</div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">23.652</span>,<span class="number">-1</span>) <span class="keyword">from</span> dual; 20</div><div class="line">  </div><div class="line"><span class="keyword">select</span> to_char(sal,<span class="string">'$99_999_999'</span>) <span class="keyword">from</span> emp;</div><div class="line"><span class="keyword">select</span> to_char(sal,<span class="string">'L99_999_999'</span>) <span class="keyword">from</span> emp;人民币符号,L:代表本地符号</div><div class="line"></div><div class="line">这个需要掌握牢:</div><div class="line"><span class="keyword">select</span> birthdate <span class="keyword">from</span> emp;</div><div class="line">显示为:</div><div class="line">BIRTHDATE</div><div class="line"><span class="comment">----------------</span></div><div class="line">17-12月-80</div><div class="line"><span class="comment">----------------</span></div><div class="line"></div><div class="line">改为:</div><div class="line"><span class="keyword">select</span> to_char(birthdate,<span class="string">'YYYY-MM-DD HH:MI:SS'</span>) <span class="keyword">from</span> emp;</div><div class="line"></div><div class="line">显示:</div><div class="line"> </div><div class="line">BIRTHDATE</div><div class="line"><span class="comment">-------------------</span></div><div class="line">1980-12-17 12:00:00</div><div class="line"><span class="comment">-------------------</span></div><div class="line"></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'YYYY-MM-DD HH24:MI:SS'</span>) <span class="keyword">from</span> dual; //也可以改为:HH12</div><div class="line">TO_CHAR(SYSDATE,'YY</div><div class="line"><span class="comment">-------------------</span></div><div class="line">2017-07-15 14:46:14</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">to_date函数:</div><div class="line">select ename,birthdate from emp where birthdate &gt; to_date('1981-2-20 12:34:56','YYYY-MM-DD HH24:MI:SS');</div><div class="line">如果直接写 birthdate&gt;'1981-2-20 12:34:56'会出现格式不匹配,因为表中的格式为: DD-MM月-YY.</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">select sal from emp where sal&gt;888.88 无错.但</div><div class="line">select sal from emp where sal&gt;$1,250,00;</div><div class="line">会出现无效字符错误. </div><div class="line">改为:</div><div class="line">select sal from emp where sal&gt;to_number('$1,250.00','$9,999.99');s</div><div class="line"></div><div class="line">把空值改为0</div><div class="line">select ename,sal*12+nvl(comm,0) from emp;</div><div class="line">这样可以防止comm为空时,sal*12相加也为空的情况.</div></pre></td></tr></table></figure>
<h3 id="7-Group-function-组函数"><a href="#7-Group-function-组函数" class="headerlink" title="7.  Group function 组函数"></a>7.  Group function 组函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max,min,avg ,count,sum函数</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">avg</span>(sal),<span class="string">'99999999,99'</span>) <span class="keyword">from</span> emp;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(sal),<span class="number">2</span>) <span class="keyword">from</span> emp;</div><div class="line">结果:2073.21</div><div class="line">  </div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>;</div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(ename) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>; count某个字段,如果这个字段不为空就算一个.</div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> deptno) <span class="keyword">from</span> emp;</div><div class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sqlplus sys/所设定的密码 as sysdba(用管理员登陆)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; scott &lt;span class=&quot;keyword&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unlock&lt;/span&gt;;(解锁scott账户)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-table-structure&quot;&gt;&lt;a href=&quot;#1-table-structure&quot; class=&quot;headerlink&quot; title=&quot;1. table structure&quot;&gt;&lt;/a&gt;1. table structure&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;描述某一张表：desc 表名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; 表名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-select-语句&quot;&gt;&lt;a href=&quot;#2-select-语句&quot; class=&quot;headerlink&quot; title=&quot;2. select 语句&quot;&gt;&lt;/a&gt;2. select 语句&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;计算数据可以用空表：比如：&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; dual&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,sal*&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; annual_sal &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp;与&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename,sal*&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;annual sal&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; emp;区别，加双引号保持原大小写。不加全变大写。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; ename || &lt;span class=&quot;string&quot;&gt;&quot;abcd&quot;&lt;/span&gt; 如果连接字符串中含有单引号，用两个单引号代替一个单引号。(||代表连接符)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="https://okcthouder.github.io/categories/Oracle/"/>
    
    
      <category term="Oracle sql" scheme="https://okcthouder.github.io/tags/Oracle-sql/"/>
    
  </entry>
  
  <entry>
    <title>java读书笔记-Thread类</title>
    <link href="https://okcthouder.github.io/2017/07/14/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Thread%E7%B1%BB/"/>
    <id>https://okcthouder.github.io/2017/07/14/java读书笔记-Thread类/</id>
    <published>2017-07-14T06:54:22.000Z</published>
    <updated>2017-07-25T06:57:20.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、线程的三个常用方法"><a href="#一、线程的三个常用方法" class="headerlink" title="一、线程的三个常用方法"></a>一、线程的三个常用方法</h3><p><img src="http://img.blog.csdn.net/20170714082842505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
 <a id="more"></a>
<h3 id="二、线程死锁图解"><a href="#二、线程死锁图解" class="headerlink" title="二、线程死锁图解"></a>二、线程死锁图解</h3><p><img src="http://img.blog.csdn.net/20170714082902509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img">            Thread1锁住了上面的对象，等待锁住下面的对象来完成执行过程。但是下面的对象被Thread2锁住了，它也等着锁住上面的对象来完成执行，因此陷入了死锁。</p>
<h3 id="三、死锁小程序"><a href="#三、死锁小程序" class="headerlink" title="三、死锁小程序"></a>三、死锁小程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object(), o2 = <span class="keyword">new</span> Object();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	System.out.println(<span class="string">"flag="</span> + flag);</div><div class="line">		<span class="keyword">if</span>(flag == <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span>(o1) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">500</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">synchronized</span>(o2) &#123;</div><div class="line">					System.out.println(<span class="string">"1"</span>);	</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(flag == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">synchronized</span>(o2) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">500</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">synchronized</span>(o1) &#123;</div><div class="line">					System.out.println(<span class="string">"0"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		TestDeadLock td1 = <span class="keyword">new</span> TestDeadLock();</div><div class="line">		TestDeadLock td2 = <span class="keyword">new</span> TestDeadLock();</div><div class="line">		td1.flag = <span class="number">1</span>;</div><div class="line">		td2.flag = <span class="number">0</span>;</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(td1);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(td2);</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、面试题"><a href="#四、面试题" class="headerlink" title="四、面试题"></a>四、面试题</h3><p>下面举个小例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TT</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> b = <span class="number">100</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">//Thread.sleep(2000);</span></div><div class="line">		b = <span class="number">1000</span>;</div><div class="line">		Thread.sleep(<span class="number">5000</span>);</div><div class="line">		System.out.println(<span class="string">"b = "</span> + b);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Thread.sleep(<span class="number">2500</span>);</div><div class="line">		b = <span class="number">2000</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			m1();</div><div class="line">		&#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		TT tt = <span class="keyword">new</span> TT();</div><div class="line">		Thread t = <span class="keyword">new</span> Thread(tt);</div><div class="line">		t.start();</div><div class="line">		</div><div class="line">		tt.m2();</div><div class="line">		System.out.println(tt.b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的输出结果是：2000</p>
<h3 id="五、wait-跟sleep-区别"><a href="#五、wait-跟sleep-区别" class="headerlink" title="五、wait()跟sleep()区别"></a>五、wait()跟sleep()区别</h3><p>1)wait时别的线程可以访问锁定对象(调用wait方法的时候必须锁定该对象)</p>
<p>2)sleep时别的线程也不可以访问锁定对象</p>
<p>2)Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制，而在同步块中的Thread.sleep()方法并不释放锁，仅释放CPU控制权。</p>
<h3 id="六、wait-跟notify-方法"><a href="#六、wait-跟notify-方法" class="headerlink" title="六、wait()跟notify()方法"></a>六、wait()跟notify()方法</h3><pre><code> 1)wait()方法与notify()必须要与synchronized(resource)一起使用。(也就是wait与notify针对已经获取了resource锁的线程进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。)

2) wait和notify方法均可释放对象的锁，但wait同时释放CPU控制权，即它后面的代码停止执行，线程进入阻塞状态，而notify方法不立刻释放CPU控制权，而是在相应的synchronized(){}语句块执行结束，再自动释放锁。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、线程的三个常用方法&quot;&gt;&lt;a href=&quot;#一、线程的三个常用方法&quot; class=&quot;headerlink&quot; title=&quot;一、线程的三个常用方法&quot;&gt;&lt;/a&gt;一、线程的三个常用方法&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170714082842505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://okcthouder.github.io/categories/java/"/>
    
    
      <category term="Thread" scheme="https://okcthouder.github.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>java读书笔记-IO类-编程小问题</title>
    <link href="https://okcthouder.github.io/2017/07/13/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-IO%E7%B1%BB-%E7%BC%96%E7%A8%8B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://okcthouder.github.io/2017/07/13/java读书笔记-IO类-编程小问题/</id>
    <published>2017-07-13T11:20:28.000Z</published>
    <updated>2017-07-26T11:24:19.463Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在重新复习下java SE的内容，把一下小问题记录下来。</p>
 <a id="more"></a>
<h3 id="一、Java流式输入输出原理图"><a href="#一、Java流式输入输出原理图" class="headerlink" title="一、Java流式输入输出原理图"></a>一、Java流式输入输出原理图</h3><p><img src="http://img.blog.csdn.net/20170712114742456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h3 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h3><p><img src="http://img.blog.csdn.net/20170712114801974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h3 id="三、节点流类型"><a href="#三、节点流类型" class="headerlink" title="三、节点流类型"></a>三、节点流类型</h3><p><img src="http://img.blog.csdn.net/20170712114821261?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>以stream结尾的是字节流，以reader或writer结尾的是字符流。
</code></pre><h4 id="一、字节流文件复制"><a href="#一、字节流文件复制" class="headerlink" title="一、字节流文件复制"></a>一、字节流文件复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileOutputStream</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	  <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">	  FileInputStream in = <span class="keyword">null</span>;</div><div class="line">	  FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	  <span class="keyword">try</span> &#123;</div><div class="line">	    in = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/share/java/HelloWorld.java"</span>);</div><div class="line">	    out = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/share/java/io/HW.java"</span>);</div><div class="line">	    <span class="keyword">while</span>((b=in.read())!=-<span class="number">1</span>)&#123;</div><div class="line">	      out.write(b);</div><div class="line">	    &#125;</div><div class="line">	    in.close();</div><div class="line">	    out.close();</div><div class="line">	  &#125; <span class="keyword">catch</span> (FileNotFoundException e2) &#123;</div><div class="line">	    System.out.println(<span class="string">"找不到指定文件"</span>); System.exit(-<span class="number">1</span>);</div><div class="line">	  &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">	    System.out.println(<span class="string">"文件复制错误"</span>); System.exit(-<span class="number">1</span>);</div><div class="line">	  &#125;</div><div class="line">	  System.out.println(<span class="string">"文件已复制"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二、BufferedWriter和BufferedReader图解"><a href="#二、BufferedWriter和BufferedReader图解" class="headerlink" title="二、BufferedWriter和BufferedReader图解"></a>二、BufferedWriter和BufferedReader图解</h4><pre><code>如果只是用FileWriter的话只能每次写入一个字符，而在外面再包装一层BufferedWriter的话一次可以写入一个缓冲区的内容。
</code></pre><p><img src="http://img.blog.csdn.net/20170712114952059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="三、OutputStreamWriter工作原理"><a href="#三、OutputStreamWriter工作原理" class="headerlink" title="三、OutputStreamWriter工作原理"></a>三、OutputStreamWriter工作原理</h4><pre><code>如果只是用FileWriter的话只能每次写入一个字节，而在外面再包装一层BufferedWriter的话一次可以写入一个字符串的内容。
</code></pre><p><img src="http://img.blog.csdn.net/20170712115009370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvT25seUxvdmVfS0Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在重新复习下java SE的内容，把一下小问题记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://okcthouder.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://okcthouder.github.io/tags/java/"/>
    
      <category term="IO" scheme="https://okcthouder.github.io/tags/IO/"/>
    
      <category term="编程小问题" scheme="https://okcthouder.github.io/tags/%E7%BC%96%E7%A8%8B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>java读书笔记-常用类-编程小问题</title>
    <link href="https://okcthouder.github.io/2017/07/11/java%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E7%B1%BB-%E7%BC%96%E7%A8%8B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://okcthouder.github.io/2017/07/11/java读书笔记-常用类-编程小问题/</id>
    <published>2017-07-11T11:27:28.000Z</published>
    <updated>2017-07-26T11:29:45.203Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在重新复习下java SE中常用类的内容，把一下小问题记录下来。</p>
 <a id="more"></a>
<h3 id="一、用Java编写一个程序，输出一个字符串中的大写英文字母数，小写英文字母数以及非英文字母数。"><a href="#一、用Java编写一个程序，输出一个字符串中的大写英文字母数，小写英文字母数以及非英文字母数。" class="headerlink" title="一、用Java编写一个程序，输出一个字符串中的大写英文字母数，小写英文字母数以及非英文字母数。"></a>一、用Java编写一个程序，输出一个字符串中的大写英文字母数，小写英文字母数以及非英文字母数。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="comment">//方法一</span></div><div class="line">		<span class="comment">//String s = "AaaaABBBBcc&amp;^%adfsfdCCOOkk99876 _haHA";</span></div><div class="line">		<span class="comment">//int lCount = 0, uCount = 0, oCount = 0;</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		for(int i=0; i&lt;s.length(); i++) &#123;</div><div class="line">			char c = s.charAt(i);</div><div class="line">			if(c &gt;= 'a' &amp;&amp; c &lt;= 'z') &#123;</div><div class="line">				lCount ++;</div><div class="line">			&#125; else if (c &gt;='A' &amp;&amp; c &lt;= 'Z') &#123;</div><div class="line">				uCount ++;</div><div class="line">			&#125; else &#123;</div><div class="line">				oCount ++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		*/</div><div class="line">      </div><div class="line">      <span class="comment">//方法二</span></div><div class="line">		<span class="comment">/*</span></div><div class="line">		String sL = "abcdefghijklmnopqrstuvwxyz";</div><div class="line">		String sU = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";</div><div class="line">		for(int i=0; i&lt;s.length(); i++) &#123;</div><div class="line">			char c = s.charAt(i);</div><div class="line">			if(sL.indexOf(c) != -1) &#123;</div><div class="line">				lCount ++;</div><div class="line">			&#125; else if (sU.indexOf(c) != -1) &#123;</div><div class="line">				uCount ++;</div><div class="line">			&#125; else &#123;</div><div class="line">				oCount ++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		*/</div><div class="line">		</div><div class="line">      <span class="comment">//方法三</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</div><div class="line">			<span class="keyword">char</span> c = s.charAt(i);</div><div class="line">			<span class="keyword">if</span>(Character.isLowerCase(c)) &#123;</div><div class="line">				lCount ++;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isUpperCase(c)) &#123;</div><div class="line">				uCount ++;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				oCount ++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(lCount + <span class="string">" "</span> + uCount + <span class="string">" "</span> + oCount);</div></pre></td></tr></table></figure>
<h3 id="二、将“1-2-3-4-5-6-7-8”这个字符串分解为二维数组。"><a href="#二、将“1-2-3-4-5-6-7-8”这个字符串分解为二维数组。" class="headerlink" title="二、将“1,2;3,4,5;6,7,8”这个字符串分解为二维数组。"></a>二、将“1,2;3,4,5;6,7,8”这个字符串分解为二维数组。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayParser</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span>[][] d;</div><div class="line">    String = <span class="string">"1,2;3,4,5;6,7,8"</span>;</div><div class="line">    String[] sFirst = s.split(<span class="string">";"</span>);</div><div class="line">    d = <span class="keyword">new</span> <span class="keyword">double</span>[sFirst.length][];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sFirst.length; i++)&#123;</div><div class="line">      String[] sSecond = sFirst[i].split(<span class="string">","</span>);</div><div class="line">      d[i] = <span class="keyword">new</span> <span class="keyword">double</span>[sSecond.length];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sSecong.length; j++)&#123;</div><div class="line">        d[i][j] = Double.parseDouble(sSecond[j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++)&#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; d[i].length; j++)&#123;</div><div class="line">        System.out.print(d[i][j] + <span class="string">" "</span>);</div><div class="line">      &#125;</div><div class="line">      System.out.println();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、利用递归列出目录结构"><a href="#三、利用递归列出目录结构" class="headerlink" title="三、利用递归列出目录结构"></a>三、利用递归列出目录结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		File f = <span class="keyword">new</span> File(<span class="string">"d:/A"</span>);</div><div class="line">		System.out.println(f.getName());</div><div class="line">		tree(f, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tree</span><span class="params">(File f, <span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line"></div><div class="line">		String preStr = <span class="string">""</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;level; i++) &#123;</div><div class="line">			preStr += <span class="string">"    "</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		File childs = f.listFiles();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;childs.length; i++) &#123;</div><div class="line">			System.out.println(preStr + childs[i].getName());</div><div class="line">			<span class="keyword">if</span>(childs[i].isDirectory()) &#123;</div><div class="line">				tree(childs[i], level + <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、编写一个方法，输出在一个字符串中，指定字符串出现的次数"><a href="#四、编写一个方法，输出在一个字符串中，指定字符串出现的次数" class="headerlink" title="四、编写一个方法，输出在一个字符串中，指定字符串出现的次数"></a>四、编写一个方法，输出在一个字符串中，指定字符串出现的次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	String s = <span class="string">"sunjavahpjavaokjavajjavahahajavajavagoodjava"</span>;</div><div class="line">	</div><div class="line">	String sToFind = <span class="string">"java"</span>;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span>((index = s.indexOf(sToFind)) != -<span class="number">1</span>) &#123;</div><div class="line">		s = s.substring(index + sToFind.length());</div><div class="line">		count ++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	System.out.println(count);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在重新复习下java SE中常用类的内容，把一下小问题记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://okcthouder.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://okcthouder.github.io/tags/java/"/>
    
      <category term="class" scheme="https://okcthouder.github.io/tags/class/"/>
    
      <category term="递归" scheme="https://okcthouder.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>别再乱用jQuery return false</title>
    <link href="https://okcthouder.github.io/2017/05/14/%E5%88%AB%E5%86%8D%E4%B9%B1%E7%94%A8jQuery%20return%20false/"/>
    <id>https://okcthouder.github.io/2017/05/14/别再乱用jQuery return false/</id>
    <published>2017-05-14T07:48:12.000Z</published>
    <updated>2017-07-29T07:52:33.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    event.preventDefault()方法是用于取消事件的默认行为，但此方法并不被ie支持，在ie下需要用window.event.returnValue = false; 来实现。这不是<a href="http://lib.csdn.net/base/jquery" target="_blank" rel="external">jQuery</a>的方法，是JS本身自带的。</p>
 <a id="more"></a>
<p>event.preventDefault()<br>​    该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。例如，如果 type 属性是 “submit”，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。</p>
<p>event.stopPropagation()<br>​    该方法将停止事件的冒泡，阻止它被分派到其他 Document 节点。在事件冒泡的任何阶段都可以调用它。注意，虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点。<br>event是DOM的事件方法，所以不是单独使用，比如指定DOM。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在<a href="http://lib.csdn.net/base/jquery" target="_blank" rel="external">jQuery</a>代码中，我们常见用return false来阻止浏览器的默认行为。例如点击链接，浏览器默认打开一个新窗口/标签，为了阻止浏览器的默认行为，我们往往这样操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"a.toggle"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    $(<span class="string">"#mydiv"</span>).toggle();  </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这段代码的作用是通过点击toggle来隐藏或显示#mydiv，并阻止浏览器继续访问href指定链接。<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>如下：</p>
<p><a href="http://www.berlinix.com/js/jquery-return-false.php#" target="_blank" rel="external">click toggle</a></p>
<p>点击上一行的toggle，这段文字将被显示或隐藏。</p>
<h2 id="return-false的作用"><a href="#return-false的作用" class="headerlink" title="return false的作用"></a>return false的作用</h2><p>return false达到了我们想要的目的，但这并不是阻止浏览器执行默认行为的正确方法。调用return false，它实际完成了3件事：</p>
<h4 id="1-event-preventDefault"><a href="#1-event-preventDefault" class="headerlink" title="1.event.preventDefault()"></a>1.event.preventDefault()</h4><h4 id="2-event-stopPropagation"><a href="#2-event-stopPropagation" class="headerlink" title="2.event.stopPropagation()"></a>2.event.stopPropagation()</h4><h4 id="3-停止回调函数执行并立即返回。"><a href="#3-停止回调函数执行并立即返回。" class="headerlink" title="3.停止回调函数执行并立即返回。"></a>3.停止回调函数执行并立即返回。</h4><p>我们真正的目的是event.preventDefault()，后两者可不是我们想要的。<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="external">JavaScript</a>事件有两种，一种称为事件冒泡（event bubbling），一种称为事件捕捉（event capturing）。事件冒泡指事件在初始DOM上触发，通过DOM树往上在每一级父元素上触发；当事件向下冒泡时，我们则称之为事件捕获。</p>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>因为return false多做了两件事，由此为代码埋下隐患。下面有一个简单的例子，点击一个链接，加载新的页面内容到当前页面：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div class="post"&gt;  </div><div class="line">    &lt;a href="/js/loadp1.txt"&gt;Click here to load page1&lt;/a&gt;  </div><div class="line">    &lt;div class="content"&gt;  </div><div class="line">    &lt;/div&gt;  </div><div class="line">&lt;/div&gt;  </div><div class="line">  </div><div class="line">&lt;div class="post"&gt;  </div><div class="line">    &lt;a href="/js/loadp2.txt"&gt;Click here to load page2&lt;/a&gt;  </div><div class="line">    &lt;div class="content"&gt;  </div><div class="line">    &lt;/div&gt;  </div><div class="line">&lt;/div&gt;  </div><div class="line">  </div><div class="line">$("div.post a").click(function() &#123;  </div><div class="line">    var href = $(this).attr("href");  </div><div class="line">    $(this).next().load(href);  </div><div class="line">    return false;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="external">测试</a>如下：</p>
<p><a href="http://www.berlinix.com/js/loadp1.txt" target="_blank" rel="external">Click here to load page1</a></p>
<p><a href="http://www.berlinix.com/js/loadp2.txt" target="_blank" rel="external">Click here to load page2</a></p>
<p>​    点击链接就能加载页面内容到当前页，一切都OK。现在我们想要加一个新功能，例如论坛帖子的浏览，只有当前点击的帖子内容才会显示，其他帖子都隐藏。为此我们需要为div.post加一个click()事件处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.post"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    $(<span class="string">"div.post .content"</span>).hide();          <span class="comment">// hide all content  </span></div><div class="line">    $(<span class="keyword">this</span>).children(<span class="string">".content"</span>).show();    <span class="comment">// show this one  </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>​    添加完这段代码后，我们发现它不生效，缘故是因为<code>$(&quot;div.post a&quot;).click(function() { return false; });</code>，由于return false执行了event.stopPropagation()，因此事件不能冒泡到上一级DOM，即<code>$(&quot;div.post&quot;).click()</code>不会被事件触发。要达成我们的任务，应该把return false替换为event.preventDefault()：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.post a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> href = $(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);  </div><div class="line">    $(<span class="keyword">this</span>).next().load(href);  </div><div class="line">    e.preventDefault();  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>测试修改后的代码：</p>
<p><a href="http://www.berlinix.com/js/loadp1.txt" target="_blank" rel="external">Click here to load page1</a></p>
<p><a href="http://www.berlinix.com/js/loadp2.txt" target="_blank" rel="external">Click here to load page2</a></p>
<h2 id="return-false-和-live-delegate"><a href="#return-false-和-live-delegate" class="headerlink" title="return false 和 live/delegate"></a>return false 和 live/delegate</h2><p>如果把<strong>return false和live/delegate</strong>事件混用，情况就更糟糕了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// do something  </span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">$(<span class="string">"a"</span>).live(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// this won't fire  </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果确实需要阻止事件冒泡，也应该<strong>显式</strong>地调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div.post"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// do something  </span></div><div class="line">&#125;);  </div><div class="line">$(<span class="string">"div.post a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </div><div class="line">    <span class="comment">// 浏览器跳转到新页面（默认行为）  </span></div><div class="line">    <span class="comment">// 但阻止事件冒泡，即不会执行$("div.post").click()  </span></div><div class="line">    e.stopPropagation();  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="event-stoplmmediatePropagetion"><a href="#event-stoplmmediatePropagetion" class="headerlink" title="event.stoplmmediatePropagetion()"></a>event.stoplmmediatePropagetion()</h2><p>​    event.stopPropagation()用于阻止事件冒泡，jQuery中还有另一个函数：event.stopImmediatePropagation()，它用于阻止一个事件的继续执行，即使当前对象上还绑定了其他处理函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// do something  </span></div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">$(<span class="string">"div a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </div><div class="line">    <span class="comment">// stop immediate propagation  </span></div><div class="line">    e.stopImmediatePropagation();  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">$(<span class="string">"div a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// never fires  </span></div><div class="line">&#125;);  </div><div class="line">  </div><div class="line">$(<span class="string">"div a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="comment">// never fires  </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    最后结论是：理解return false，尽量避免使用它，请用event.preventDefault()替代return false。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    event.preventDefault()方法是用于取消事件的默认行为，但此方法并不被ie支持，在ie下需要用window.event.returnValue = false; 来实现。这不是&lt;a href=&quot;http://lib.csdn.net/base/jquery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;的方法，是JS本身自带的。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://okcthouder.github.io/categories/javascript/"/>
    
      <category term="jQuery" scheme="https://okcthouder.github.io/categories/javascript/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://okcthouder.github.io/tags/jQuery/"/>
    
      <category term="javascript" scheme="https://okcthouder.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
